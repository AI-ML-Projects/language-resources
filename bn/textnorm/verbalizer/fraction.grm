# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Verbalizer for fractions.
# Can verbalize vulgar fractions specified by a numerator and denominator
# and also mixed fractions such as "2 3/5".

import 'bangla.grm' as bangla;
import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c;

# Supporting all fractions.
all_numerator_bd =
  universal_rules.numerator
  c.CARDINAL
  ("" : " বিভাজন ")
  universal_rules.rec_sep
  universal_rules.denominator
  c.CARDINAL
  universal_rules.rec_sep
;

# Supporting fraction: 1/2.
one_half_bd =
  universal_rules.numerator
  ("1" : "")
  universal_rules.rec_sep
  universal_rules.denominator
  ("2" : "আধা" <-1.0>)
  universal_rules.rec_sep
;

# Supporting fractions: 1/3, 2/3.
three_denominator_bd =
  universal_rules.numerator
  (("1" | "2") @ c.CARDINAL)
  universal_rules.rec_sep
  universal_rules.denominator
  universal_rules.ins_space
  ("3" : "একতৃতীয়াংশ")
  universal_rules.rec_sep
;

# Supporting fractions: 1/4, 2/4, 3/4.
four_denominator_bd =
  universal_rules.numerator
  (("1" | "2" | "3") @ c.CARDINAL)
  universal_rules.rec_sep
  universal_rules.denominator
  universal_rules.ins_space
  ("4" : "একচতুর্থাংশ")
  universal_rules.rec_sep
;

# Integer part in mixed fractions.
integer_fraction_bd =
  universal_rules.integer_part
  c.CARDINAL
  universal_rules.ins_space
  universal_rules.rec_sep
  all_numerator_bd
;

export BD_FRACTION = Optimize[
  (integer_fraction_bd | all_numerator_bd |
   ((one_half_bd | three_denominator_bd | four_denominator_bd) <-1.0>))
];

vowel_endings_for_r =  ("া" | "ি" | "ী" | "ু" | "ূ" | "ে" | "ৈ" | "ো" | "ৌ");

suffix_r_to_vowel = CDRewrite[
  ("" : "র"), vowel_endings_for_r, "[EOS]", universal_rules.sigma_star
];

vowel_endings_for_er = ("ই" | "ও" | "ঈ" | "এ" | "ঐ" | "ঔ");

suffix_er_to_vowel = CDRewrite[
  ("" : "এর"), vowel_endings_for_er, "[EOS]", universal_rules.sigma_star
];

consonants = bangla.BANGLA_ALPHA - (vowel_endings_for_r | vowel_endings_for_er);

suffix_consonants = CDRewrite[
  ("" : "ের"), consonants, "[EOS]", universal_rules.sigma_star
];

all_suffixes =
  (c.CARDINAL @ suffix_consonants @ suffix_r_to_vowel @ suffix_er_to_vowel)
;

all_numerator_in =
  universal_rules.numerator
  all_suffixes
  universal_rules.ins_space
  universal_rules.rec_sep
  universal_rules.denominator
  c.CARDINAL
  universal_rules.rec_sep
;

# Integer part in mixed fractions.
integer_fraction_in =
  (universal_rules.integer_part
  c.CARDINAL
  universal_rules.ins_space
  universal_rules.rec_sep
  ("" : "পূর্ণ")
  universal_rules.ins_space)?
  all_numerator_in
;

export IN_FRACTION = integer_fraction_in;

export BD_FRACTION_MARKUP = Optimize[
  universal_rules.semclass_fraction BD_FRACTION
];

export IN_FRACTION_MARKUP = Optimize[
  universal_rules.semclass_fraction IN_FRACTION
];

export FRACTION_MARKUP = "";
