# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Verbalizer for electronic items such as URLs and
# email addresses.

import 'number_names_rules.grm' as n;
import 'mini_lseq_rules.grm' as lseq;
import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'date.grm' as d;
import 'verbatim.grm' as verbatim;

cardinal = n.CARDINAL_NUMBER_NAME;

delete_dots = CDRewrite["." : "", "", "", universal_rules.sigma_star];

read_verbatim = (universal_rules.kNotRecSep+ @ verbatim.MAPPINGS)
                universal_rules.ins_space;

verbatim_component = universal_rules.URL_LSEQS @ read_verbatim+;
date_component = (("19" | "20") universal_rules.kDigit{2}) @ d.YEAR_ONLY;
word_component = (universal_rules.lower_case @
                 (universal_rules.kLower universal_rules.kLower+) @
                 (universal_rules.kLower* universal_rules.VOWELS_Y universal_rules.kLower*));

number_component = (universal_rules.kDigit{2} @ cardinal) |
                   (universal_rules.kDigit+ @ read_verbatim+);

lseq_component = (universal_rules.upper_case @
                  lseq.FORCE_LSEQ_BN @
                  (delete_dots @ read_verbatim+));

read_electronic = (
                    (
                      (
                        (
                          (verbatim_component<10>) |
                          (date_component<10>) |
                          (word_component<20>) |
                          (number_component<20>) |
                          (verbatim.MAPPINGS<40>) |
                          (lseq_component<1>)
                        )
                        universal_rules.ins_space
                      )+
                    )<1>
                  )*;

# special case to read Twitter hashtags more naturally
read_hashtag = ("#" : " hash tag ")
               (
                 universal_rules.ins_space
                 (universal_rules.kAlpha+ @ universal_rules.lower_case)
                 ("_" : " ")?
                 universal_rules.ins_space
               )+;

read_plus_oned = ("+" @ read_verbatim) ("1'd" : "one'd");

# Slight fiddle to read two-letter ccTLDs as verbatim - eg.
# .us -> "dot u_letter s_letter" not "dot us".
read_domain = read_electronic
              ((("." universal_rules.kAlpha{2}) @ read_verbatim+)<-1>)?;

# Reading of IPv6/MAC addresses; basically just skip the separating characters.
read_address = ((universal_rules.kHex @ read_verbatim) | ((":" | "-") : " sil "))+;

# we read protocol and password letter by letter
# port as a number
# everything else we try to read by words if possible
# eg. www.google.com -> "w w w dot google dot com"
protocol = universal_rules.protocol
           read_verbatim*
           universal_rules.rec_sep;
username = universal_rules.username
           (read_electronic | read_hashtag | read_plus_oned)
           universal_rules.rec_sep;
password = universal_rules.password
           read_verbatim*
           universal_rules.rec_sep;
domain = universal_rules.domain
         (read_domain | (read_address<-1>))
         universal_rules.rec_sep;
# this is a little fiddly; I would read :80 as "eighty",
# :443 as "four four three" and :8080 as "eighty eighty".
# Trying to reproduce that here.
port = universal_rules.port
       (
         (((universal_rules.kDigit @ cardinal) ("00" : " শত "))<-2>) |
         (((universal_rules.kDigit @ read_verbatim+)
           (universal_rules.kDigit "0") @ cardinal)<-1>) |
         (universal_rules.kDigit{3} @ read_verbatim+) |
         ((universal_rules.kDigit{2} @ cardinal universal_rules.ins_space){2}) |
         ((verbatim.REPEATED_MAPPINGS)<1>)
       ) universal_rules.rec_sep;
path = universal_rules.path
       read_electronic
       universal_rules.rec_sep;
query_string = universal_rules.query_string
               read_electronic
               universal_rules.rec_sep;
fragment_id = universal_rules.fragment_id
              read_electronic
              universal_rules.rec_sep;

electronic = Optimize[
  (protocol ("" : "colon slash slash "))?
  (username (("" : "password ") password ("" : "at "))?)?
  domain?
  (("" : "port ") port)?
  path?
  (("" : "প্রশ্নবোধক চিহ্ন ") query_string)?
  (("" : "hash ") fragment_id)?
];

# Not sure why CLEAN_SPACES is needed here but not in Hindi.

export ELECTRONIC_MARKUP = Optimize[
 (universal_rules.semclass_electronic
  electronic
 ) @ universal_rules.CLEAN_SPACES
];
