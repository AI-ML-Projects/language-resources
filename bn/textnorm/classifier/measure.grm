# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

prefix = (
           ("কি" : "kilo") |
           ("সেং" : "centi") |
           ("সেই" : "centi") |
           ("মি" : "milli") |
           universal_rules.UNIT_PREFIXES_ALL
         ) ("." : "")?;

unit = (
         ("সে" : "second") |
         ("মি" : "meter") |
         ("গ্রা" : "gram") |
         universal_rules.ALL_UNITS
       ) ("." : "")?;

# Unit can be enclosed in brackets, e.g. (k.m.) or (কি.মি.)
brackets = (("(" : "")? prefix? unit (")" : "")?);

# For cases like (কি.মি.)/সে or km/h
symbols = ("/" : " per ");
hi_units = brackets |
           (brackets symbols unit);

# Works for (কি.মী.)/সে though
# Support Test Case:
#  MEASURE_MARKUP 100 (km)/h measure { decimal { integer_part: "100"  }
#                                      units: "kilometer per hour" }
# Support Test Case:
#  MEASURE_MARKUP 100 (k.m./h) measure { decimal { integer_part: "100"  }
#                                        units: "kilometer per hour" }
# Uncomment the Test Case at line 30,31 in testdata/universal_rules.txt

square = ("" : "square ") hi_units (("²" | "2" | "^2") : "");
cubic = ("" : "cubic ") hi_units (("³" | "3" | "^3") : "");
power = square | cubic;

# Entire unit can be enclosed in brackets,
# e.g. (km/h) or ((nm)/sec) or ((কি.মী.)/সে)
all_units = ("(" : "")? ( hi_units | power) (")" : "")?;

number = universal_rules.INTEGER_DECIMAL_MARKUP | universal_rules.FRACTION_MARKUP;
export MEASURE = Optimize[number universal_func.UnitMarkup[all_units]];
export MEASURE_MARKUP = Optimize[universal_func.MeasureMarkup[number, all_units]];
