# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# There are no LSEQ in Bangla, but the grammar is included to support cases like
# এ-404 (which might appear as Road Signs) and to support initials.

import 'bangla.grm' as bn;
import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

bn_alpha = bn.BANGLA_ALPHA;

# English letters transcribed in Bangla.
en_alpha_in_bn = Optimize [
  "এ" | "বী" | "বি" | "সি" | "সী" | "ডি" | "ডী" | "ঈ" | "ই" | "এফ" | "এফ" |
  "জী" | "জি" | "এইচ" | "এচ" | "আই" | "জে" | "কে" | "এল" | "এল" | "এম" |
  "এম" | "এন" | "এন" | "ও" | "পী" | "ক্য়ু" | "কিউ" | "আর" | "এস" | "এস" |
  "টী" | "টি" | "ইউ" | "ভী" | "ভি" | "ডব্লিউ" | "এক্স" | "ওয়াই" | "জেড" | "জী"
];
alpha_all = Optimize[universal_rules.kAlpha | en_alpha_in_bn];
alpha_all_and_bn = Optimize[alpha_all | bn_alpha];
caps = Optimize [universal_rules.kUpper | en_alpha_in_bn];
caps_all = Optimize[caps | bn_alpha];

ins_dots = (alpha_all ("" : "."))+;
delete_dots = CDRewrite["." : "", "", "", universal_rules.sigma_star];
joins = "&" | "-" | "_" | "/" | " ";
# Plural or possessive modifiers.
trailing_modifier = "s" | "'s";

# To prevent lseq to get converted back to words in lexicon
io = CDRewrite["/" : "", "I" | "i", "O" | "o", universal_rules.sigma_star];
export FORCE_LSEQ_BN = delete_dots @ io @ universal_rules.upper_case @ (
  "BCCI" | "IPL" | "RBI" | "CBI" | "FBI" | "IIT" | "NIT" | "NIFT" | "CIA" |
  "EU" | "OS" | "SA" | ("US" "A"?) | "MIT" | "CNBC" | "TV" | "VS" |
  "BBC" | "CBS" | "CBBC" | "CNBC" | "CNN" | "NBC" | "PHD" | "URL" | "YMCA" |
  "YWCA" | "SMS" | "ОM" | "CMC" | "FIFA" | "MSC" | "BSC" | "OMG" | "ROFL" |
  "LMAO" | "URL" | "YMCA" | "YWCA" | "IPV" | "IMDB" | "EG" | "AKA" | "IO" |
  "PTS" | "OK"
  );

force_lseq_all = universal_rules.FORCE_LSEQ | FORCE_LSEQ_BN;

# 'os' is a word in Spanish, so cannot be added lowercase without context
os = "os" @ ins_dots @ universal_rules.LSEQ_MARKUP;
os_affixes = ("android" | "chrome" | "windows" | "x" | "linux" | "ubuntu")
             @ universal_rules.word_token;
os_lseq = universal_rules.lower_case_anything @
          ((os_affixes universal_rules.token_delimiter_clear_space_plus os) |
           (os universal_rules.token_delimiter_clear_space_plus os_affixes));

# The following are captured as lseq, would be converted back to word if they
# are in the lexicon.
lseq_may_be_a_word = "iOS";

export LSEQ = Optimize[
  (
    (
      (
        (
          ((force_lseq_all)<-1>) |
          (caps (caps | joins)* caps) |
          (lseq_may_be_a_word)
        )
        # Optionally consume following - (cases like US-built).
        (trailing_modifier | ("-" : ""))?
      ) | (
        caps trailing_modifier
      )
    ) @ universal_rules.LSEQ_MARKUP
  ) | os_lseq
];

# Combined letter / number sequence such as "K-4", "F-16" etc.
# Handling them together means we can drop the - so as to avoid
# "f minus sixteen" or similar disasters.
# Also handles cases like "A4" and "4A" to make the 'A' explicitly a letter.
cardinal_or_digit = (universal_rules.kDigit{1,3} @ universal_rules.CARDINAL_MARKUP) |
                    ((universal_rules.kDigit{3} universal_rules.kDigit+) @ universal_rules.DIGIT_MARKUP) |
                    ((universal_rules.d1to9 "0"+) @ universal_rules.CARDINAL_MARKUP<-1>);
letter_num_seq = Optimize[
  (
    ((caps? alpha_all+) @ universal_rules.upper_case @ LSEQ)
    ("-" : universal_rules.token_delimiter)
    cardinal_or_digit
  ) | (
    cardinal_or_digit
    ("-" : "")? universal_rules.token_delimiter
    (alpha_all_and_bn @ ins_dots @ universal_rules.LSEQ_MARKUP)
  ) | (
    ((caps+) @ ins_dots @ universal_rules.LSEQ_MARKUP)
    ("-" : "")? universal_rules.token_delimiter
    cardinal_or_digit
  ) | (
    (bn_alpha @ universal_rules.LSEQ_MARKUP)
    ("-" : "")? universal_rules.token_delimiter
    cardinal_or_digit
  )
];

# Sequences of multiple letters / numbers (3+).
letters = caps+ @ ins_dots @ universal_rules.LSEQ_MARKUP<5>;
numbers = universal_rules.DIGIT_MARKUP<5>;
token = ("-" : "")? universal_rules.token_delimiter;
lots_of_letters_and_numbers = Optimize[
  (
    (letters token numbers (token letters token numbers)* (token letters)?) |
    (numbers token letters (token numbers token letters)* (token numbers)?)
  )
];

export LETTER_NUM_SEQ = Optimize[letter_num_seq | lots_of_letters_and_numbers];

# Initials with fullstops in between; U.S.A. should become
# lseq "USA" for example, not three separate tokens.
letter_fullstop = caps_all "." universal_rules.clear_space_star;
export LSEQ_FULLSTOPS = Optimize[
  (
    (letter_fullstop letter_fullstop+ trailing_modifier?) |
    (letter_fullstop trailing_modifier) |
    (universal_rules.clear_space_plus letter_fullstop trailing_modifier?)
  ) @ universal_rules.LSEQ_MARKUP
];
