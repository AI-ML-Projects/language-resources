# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Burmese Verbalizer for measures.
# measure { decimal {integer_part: 33 fractional_part: "047"} units:
# "kilogram"}

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c;
import 'decimal.grm' as d;

english_units = StringFile[
    'measure_units_en.txt'];

english_prefixes = StringFile[
    'measure_prefixes_en.txt'];

prefixes = english_prefixes;
units = english_units;

# We also support units like ကီလိုမီတာ(kilo meter).
combined_units = (prefixes universal_rules.clear_space_star)? universal_rules.ins_space units;

burmese_square = "စတုရန်း";
burmese_cubic = "ကုဗ";

# Support for square & cubic meters, kilometers, etc.
# For Burmese speakers, when they pronounce a unit with 'square' or 'cubic',
# they will pronounce it as a suffix of the phrase. So we need to handle it
# by adding a corresponding suffix, if a prefix 'square' or a prefix 'cubic'
# is found.
square_units =
  ("square" : (burmese_square universal_rules.ins_space))
  universal_rules.clear_space_star
  combined_units
;
cubic_units =
  ("cubic" : (burmese_cubic universal_rules.ins_space))
  universal_rules.clear_space_star
  combined_units
;
basic_and_power_units =
    square_units
  | cubic_units
  | (combined_units (universal_rules.clear_space_star (burmese_square | burmese_cubic))?)
;

# Support for ratio units. Actually in Burmese, for ratio units, the latter unit
# is pronounced first (aka 3m/s is pronounced as each second 3 m).
# However, since  swapping is hard to implement, sticking with English
# transliteration of `per` for now. Somewhat unnatural but still understandable.
ratio_units =
  (basic_and_power_units universal_rules.clear_space_star)?
  ("per" : (universal_rules.ins_space "ပါ" universal_rules.ins_space))
  universal_rules.one_space
  basic_and_power_units
;

quantity = (universal_rules.integer c.CARDINAL_PRECEDING_UNIT universal_rules.rec_sep) | d.DECIMAL;

# Just units, no quantity
export STYLE_UNIT_ONLY = Optimize[
  universal_rules.units
  (ratio_units | basic_and_power_units)
  universal_rules.rec_sep
];

export MEASURE_MARKUP = Optimize[
  (universal_rules.semclass_measure
  quantity
  universal_rules.ins_space
  STYLE_UNIT_ONLY
 )
  @ universal_rules.CLEAN_SPACES
];

export MEASURE_UNIT_ONLY = Optimize[
  (universal_rules.semclass_measure
  STYLE_UNIT_ONLY
 )
  @ universal_rules.CLEAN_SPACES
];
