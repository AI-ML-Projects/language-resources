# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Burmese Verbalizer for times. Takes ascii protocol buffers for a
# time and converts it to regular Burmese words.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c;
import 'lseq.grm' as l;

hour_mark = "" : "နာရီ";
minute_mark = "" : "မိနစ်";
second_mark = "" : "စက္ကန့်";

# These are the prefix words to indicate time period in a day.
# For example, "morning 4 o'clock", "evening 9 o'clock", these are the words
# "morning", "evening", which we will keep unchanged and verbalize later.
burmese_periods = "မနက်" | "နံနက်" | "မနက်ခင်း" |
        "မွန်းလွဲ" | "ညနေ" | "ည" | "နေ့ခင်း";

# Typical cardinal number but say nothing if the input is "0" or "00".
func omitZeroCardinalWithTimeUnit[time_unit] {
  return ((universal_rules.ins_space (universal_rules.non_zero_number @ c.CARDINAL_PRECEDING_UNIT)
           universal_rules.ins_space time_unit) |
          (("0" | "00") : ""));
}

suffix_part = Optimize[
  universal_rules.suffix burmese_periods universal_rules.rec_sep
];

hour_part =
   universal_rules.hours c.CARDINAL_PRECEDING_UNIT universal_rules.ins_space hour_mark universal_rules.rec_sep;
minute_part = universal_rules.minutes omitZeroCardinalWithTimeUnit[minute_mark] universal_rules.rec_sep;
second_part = universal_rules.seconds omitZeroCardinalWithTimeUnit[second_mark] universal_rules.rec_sep;
zone = universal_rules.zone (universal_rules.ins_space l.MAPPINGS)* universal_rules.rec_sep;

minutes_and_seconds =
  (minute_part)?
  (second_part)?
  zone?
;

# Formal time reading style. For example, 22:51:33 will be read as
# "twenty two hour fifty one minutes thirty three second".
time = Optimize[
  (suffix_part universal_rules.ins_space)?
  hour_part
  universal_rules.ins_space minutes_and_seconds
];

export TIME_MARKUP = Optimize[
(
  universal_rules.semclass_time
  time
) @ universal_rules.CLEAN_SPACES
];
