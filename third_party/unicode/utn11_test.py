from __future__ import unicode_literals

import unittest

import utn11

CANONICAL_PAIRS = [
  ('\u1010\u102D\u103A', '\u1010\u103A\u102D'),
  ('\u1010\u103A\u102D', '\u1010\u103A\u102D'),

  ('\u101B\u1031\u1037\u103E', '\u101B\u103E\u1031\u1037'),
  ('\u101B\u1031\u103E\u1037', '\u101B\u103E\u1031\u1037'),
  ('\u101B\u1037\u1031\u103E', '\u101B\u103E\u1031\u1037'),
  ('\u101B\u1037\u103E\u1031', '\u101B\u103E\u1031\u1037'),
  ('\u101B\u103E\u1031\u1037', '\u101B\u103E\u1031\u1037'),
  ('\u101B\u103E\u1037\u1031', '\u101B\u103E\u1031\u1037'),

  # Mon:
  ('\u1010\u1031\u103A\u103E', '\u1010\u103E\u103A\u1031'),
  ('\u1010\u1031\u103E\u103A', '\u1010\u103E\u103A\u1031'),
  ('\u1010\u103A\u1031\u103E', '\u1010\u103E\u103A\u1031'),
  ('\u1010\u103A\u103E\u1031', '\u1010\u103E\u103A\u1031'),
  ('\u1010\u103E\u1031\u103A', '\u1010\u103E\u103A\u1031'),
  ('\u1010\u103E\u103A\u1031', '\u1010\u103E\u103A\u1031'),

  # Mon:
  ('\u1000\u102C\u102F\u1031\u1036', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u102C\u102F\u1036\u1031', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u102C\u1031\u102F\u1036', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u102C\u1031\u1036\u102F', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u102C\u1036\u102F\u1031', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u102C\u1036\u1031\u102F', '\u1000\u1031\u102F\u102C\u1036'),
  #
  ('\u1000\u102F\u102C\u1031\u1036', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u102F\u102C\u1036\u1031', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u102F\u1031\u102C\u1036', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u102F\u1031\u1036\u102C', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u102F\u1036\u102C\u1031', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u102F\u1036\u1031\u102C', '\u1000\u1031\u102F\u102C\u1036'),
  #
  ('\u1000\u1031\u102C\u102F\u1036', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u1031\u102C\u1036\u102F', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u1031\u102F\u102C\u1036', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u1031\u102F\u1036\u102C', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u1031\u1036\u102C\u102F', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u1031\u1036\u102F\u102C', '\u1000\u1031\u102F\u102C\u1036'),
  #
  ('\u1000\u1036\u102C\u102F\u1031', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u1036\u102C\u1031\u102F', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u1036\u102F\u102C\u1031', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u1036\u102F\u1031\u102C', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u1036\u1031\u102C\u102F', '\u1000\u1031\u102F\u102C\u1036'),
  ('\u1000\u1036\u1031\u102F\u102C', '\u1000\u1031\u102F\u102C\u1036'),
]


class TestUtn11(unittest.TestCase):

  def TestCanonicalization(self):
    for raw, canonical in CANONICAL_PAIRS:
      self.assertEqual(canonical, utn11.Canonicalize(raw))
      self.assertTrue(utn11.CLUSTER.match(canonical) is not None)
    return


if __name__ == '__main__':
  unittest.main()
