# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Currencies for Sinhala.
# money|currency:usd|integer_part:1|fractional_part:20|
# is the input formats.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c ;
import 'decimal.grm' as d ;

quantities =
    ("100000" : "ලක්ෂ")
  | ("1000000" : "මිලියන")
  | ("10000000" : "කෝටි")
  | ("1000000000" : "බිලියන");

minor_unit = StringFile[
    'money_minor.tsv'];
major_unit = StringFile[
    'money_major.tsv'];

minor_markup = universal_rules.currency minor_unit universal_rules.rec_sep;
major_markup = universal_rules.currency major_unit universal_rules.rec_sep;

# Reads just the major part of the money amount, discards the fraction.
major_part = universal_rules.integer_part c.CARDINAL universal_rules.rec_sep;
# Reads just the minor part of the money amount, discards the integer.
minor_part = universal_rules.fractional_part ("0" : "")? c.CARDINAL universal_rules.rec_sep;

# Generates verbalization of either major or minor part with
# specialization for a singular form for 1.
func MoneyPart[part, single_markup] {
  return (single_markup universal_rules.ins_space part);
}

normal =
  major_markup
  universal_rules.ins_space
  universal_rules.integer_part c.CARDINAL universal_rules.rec_sep
  (("" : "යි ") universal_rules.fractional_part c.CARDINAL universal_rules.rec_sep)?
;

# Read both major and minor units explicitly.
# e.g., Rs. 10.12 -> රුපියල් දහයයි ශත දොළහ.
# (English version: $ 10.12 -> ten dollars and twelve cents)
major_and_minor =
  MoneyPart[major_part, major_markup]
  ("" : "යි")
  universal_rules.ins_space
  MoneyPart[minor_part, minor_markup];

# Anything with a quantity.
# Quantity is verbalized before the amount and after the currency.
with_quantity =
  major_markup
  universal_rules.ins_space
  universal_rules.quantity
  quantities
  (universal_rules.rec_sep : " ")
  d.DECIMAL
;

# Major part only.
# Includes minor parts of value zero - you don't say
# "twelve dollars and zero cents" even if the .00 is written.
amount_major_only =
  universal_rules.integer_part c.CARDINAL universal_rules.rec_sep
  (universal_rules.fractional_part ("0" : "")+ universal_rules.rec_sep)?
;

major_only =
  (major_markup universal_rules.ins_space amount_major_only)
;

amount_minor_only =
  (universal_rules.integer_part ("0" : "")+ universal_rules.rec_sep)?
  universal_rules.fractional_part
  ("0" : "")? c.CARDINAL
  universal_rules.rec_sep universal_rules.del_space_star
;

minor_only =
  (minor_markup universal_rules.ins_space amount_minor_only)
;

export MONEY_MARKUP = Optimize[
  universal_rules.semclass_money
  ((minor_only <-30>)
  | (major_only <-20>)
  | (major_and_minor <-10>)
  | (normal <4>)
  | (with_quantity <5>))
];
