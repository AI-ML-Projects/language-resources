# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Repository of universal rules needed by various grammars.


far =
  'universal_depot.far'
;

export d1to9 = LoadFstFromFar[far, 'd1to9'];
export d02to9 = LoadFstFromFar[far, 'd02to9'];
export d2to9 = LoadFstFromFar[far, 'd2to9'];
export non_zero_number = LoadFstFromFar[far, 'non_zero_number'];
export factorized_number = LoadFstFromFar[far, 'factorized_number'];
export non_zero_factorized_number = LoadFstFromFar[far, 'non_zero_factorized_number'];
export ins_space = LoadFstFromFar[far, 'ins_space'];
export ins_sil = LoadFstFromFar[far, 'ins_sil'];
export ins_short_sil = LoadFstFromFar[far, 'ins_short_sil'];
export ins_quote = LoadFstFromFar[far, 'ins_quote'];
export pass_anything = LoadFstFromFar[far, 'pass_anything'];
export pass_any_word = LoadFstFromFar[far, 'pass_any_word'];
export pass_space_plus = LoadFstFromFar[far, 'pass_space_plus'];
export pass_space_star = LoadFstFromFar[far, 'pass_space_star'];
export clear_space = LoadFstFromFar[far, 'clear_space'];
export clear_space_plus = LoadFstFromFar[far, 'clear_space_plus'];
export clear_space_star = LoadFstFromFar[far, 'clear_space_star'];
export space_to_underscore = LoadFstFromFar[far, 'space_to_underscore'];
export one_space = LoadFstFromFar[far, 'one_space'];
export CLEAN_SPACES = LoadFstFromFar[far, 'CLEAN_SPACES'];
export del_space_star = LoadFstFromFar[far, 'del_space_star'];
export del_space_plus = LoadFstFromFar[far, 'del_space_plus'];
export sigma_star = LoadFstFromFar[far, 'sigma_star'];
export DELETE_SPACES = LoadFstFromFar[far, 'DELETE_SPACES'];
export REMOVE_LEADING_SPACES = LoadFstFromFar[far, 'REMOVE_LEADING_SPACES'];
export REMOVE_FINAL_SPACES = LoadFstFromFar[far, 'REMOVE_FINAL_SPACES'];
export REMOVE_BOUNDARY_SPACES = LoadFstFromFar[far, 'REMOVE_BOUNDARY_SPACES'];
export delete_initial_zero = LoadFstFromFar[far, 'delete_initial_zero'];
export lower_case_letter = LoadFstFromFar[far, 'lower_case_letter'];
export lower_case = LoadFstFromFar[far, 'lower_case'];
export lower_case_anything = LoadFstFromFar[far, 'lower_case_anything'];
export upper_case_letter = LoadFstFromFar[far, 'upper_case_letter'];
export upper_case = LoadFstFromFar[far, 'upper_case'];
export opening_brace = LoadFstFromFar[far, 'opening_brace'];
export closing_brace = LoadFstFromFar[far, 'closing_brace'];
export quote = LoadFstFromFar[far, 'quote'];
export double_quote = LoadFstFromFar[far, 'double_quote'];
export VOWELS = LoadFstFromFar[far, 'VOWELS'];
export VOWELS_Y = LoadFstFromFar[far, 'VOWELS_Y'];
export VOWELS_INSENSITIVE = LoadFstFromFar[far, 'VOWELS_INSENSITIVE'];
export CONSONANTS = LoadFstFromFar[far, 'CONSONANTS'];
export CONSONANTS_INSENSITIVE = LoadFstFromFar[far, 'CONSONANTS_INSENSITIVE'];
export URL_LSEQS = LoadFstFromFar[far, 'URL_LSEQS'];
export CARDINAL_TO_DECIMAL = LoadFstFromFar[far, 'CARDINAL_TO_DECIMAL'];
export escape_quotes_and_backslashes = LoadFstFromFar[far, 'escape_quotes_and_backslashes'];
export util_hours = LoadFstFromFar[far, 'util_hours'];
export hours_shift = LoadFstFromFar[far, 'hours_shift'];
export hours_24_to_12 = LoadFstFromFar[far, 'hours_24_to_12'];
export hours_24_to_12_next = LoadFstFromFar[far, 'hours_24_to_12_next'];
export util_minutes = LoadFstFromFar[far, 'util_minutes'];
export round_minutes = LoadFstFromFar[far, 'round_minutes'];
export unrounded_minutes = LoadFstFromFar[far, 'unrounded_minutes'];
export round_minutes_next_hour = LoadFstFromFar[far, 'round_minutes_next_hour'];
export subtract_from_60 = LoadFstFromFar[far, 'subtract_from_60'];
export any_month = LoadFstFromFar[far, 'any_month'];
export any_day = LoadFstFromFar[far, 'any_day'];
export approximately = LoadFstFromFar[far, 'approximately'];
export approx = LoadFstFromFar[far, 'approx'];
export kBytes = LoadFstFromFar[far, 'kBytes'];
export kDigit = LoadFstFromFar[far, 'kDigit'];
export kLower = LoadFstFromFar[far, 'kLower'];
export kUpper = LoadFstFromFar[far, 'kUpper'];
export kAlpha = LoadFstFromFar[far, 'kAlpha'];
export kAlnum = LoadFstFromFar[far, 'kAlnum'];
export kHex = LoadFstFromFar[far, 'kHex'];
export kSpace = LoadFstFromFar[far, 'kSpace'];
export kNotSpace = LoadFstFromFar[far, 'kNotSpace'];
export kNotQuote = LoadFstFromFar[far, 'kNotQuote'];
export kPunct = LoadFstFromFar[far, 'kPunct'];
export kGraph = LoadFstFromFar[far, 'kGraph'];
export lab_sep = LoadFstFromFar[far, 'lab_sep'];
export rec_sep = LoadFstFromFar[far, 'rec_sep'];
export pass_rec_sep = LoadFstFromFar[far, 'pass_rec_sep'];
export semclass_abbreviation = LoadFstFromFar[far, 'semclass_abbreviation'];
export semclass_address = LoadFstFromFar[far, 'semclass_address'];
export semclass_date = LoadFstFromFar[far, 'semclass_date'];
export semclass_digit = LoadFstFromFar[far, 'semclass_digit'];
export semclass_cardinal = LoadFstFromFar[far, 'semclass_cardinal'];
export semclass_connector = LoadFstFromFar[far, 'semclass_connector'];
export semclass_decimal = LoadFstFromFar[far, 'semclass_decimal'];
export semclass_electronic = LoadFstFromFar[far, 'semclass_electronic'];
export semclass_ordinal = LoadFstFromFar[far, 'semclass_ordinal'];
export semclass_formula = LoadFstFromFar[far, 'semclass_formula'];
export semclass_fraction = LoadFstFromFar[far, 'semclass_fraction'];
export semclass_money = LoadFstFromFar[far, 'semclass_money'];
export semclass_letters = LoadFstFromFar[far, 'semclass_letters'];
export semclass_telephone = LoadFstFromFar[far, 'semclass_telephone'];
export semclass_time = LoadFstFromFar[far, 'semclass_time'];
export semclass_measure = LoadFstFromFar[far, 'semclass_measure'];
export semclass_verbatim = LoadFstFromFar[far, 'semclass_verbatim'];
export semclass_concept = LoadFstFromFar[far, 'semclass_concept'];
export semclass_name = LoadFstFromFar[far, 'semclass_name'];
export semclass_spell = LoadFstFromFar[far, 'semclass_spell'];
export digit = LoadFstFromFar[far, 'digit'];
export letters = LoadFstFromFar[far, 'letters'];
export verbatim = LoadFstFromFar[far, 'verbatim'];
export integer = LoadFstFromFar[far, 'integer'];
export morphosyntactic_features = LoadFstFromFar[far, 'morphosyntactic_features'];
export integer_part = LoadFstFromFar[far, 'integer_part'];
export fractional_part = LoadFstFromFar[far, 'fractional_part'];
export negative = LoadFstFromFar[far, 'negative'];
export numerator = LoadFstFromFar[far, 'numerator'];
export denominator = LoadFstFromFar[far, 'denominator'];
export exponent = LoadFstFromFar[far, 'exponent'];
export currency = LoadFstFromFar[far, 'currency'];
export quantity = LoadFstFromFar[far, 'quantity'];
export string_quantity = LoadFstFromFar[far, 'string_quantity'];
export units = LoadFstFromFar[far, 'units'];
export country_code = LoadFstFromFar[far, 'country_code'];
export number_part = LoadFstFromFar[far, 'number_part'];
export extension = LoadFstFromFar[far, 'extension'];
export weekday = LoadFstFromFar[far, 'weekday'];
export day = LoadFstFromFar[far, 'day'];
export month = LoadFstFromFar[far, 'month'];
export year = LoadFstFromFar[far, 'year'];
export era = LoadFstFromFar[far, 'era'];
export type = LoadFstFromFar[far, 'type'];
export locality = LoadFstFromFar[far, 'locality'];
export admin_area = LoadFstFromFar[far, 'admin_area'];
export post_code = LoadFstFromFar[far, 'post_code'];
export name = LoadFstFromFar[far, 'name'];
export number = LoadFstFromFar[far, 'number'];
export hours = LoadFstFromFar[far, 'hours'];
export minutes = LoadFstFromFar[far, 'minutes'];
export seconds = LoadFstFromFar[far, 'seconds'];
export milliseconds = LoadFstFromFar[far, 'milliseconds'];
export suffix = LoadFstFromFar[far, 'suffix'];
export zone = LoadFstFromFar[far, 'zone'];
export protocol = LoadFstFromFar[far, 'protocol'];
export username = LoadFstFromFar[far, 'username'];
export password = LoadFstFromFar[far, 'password'];
export domain = LoadFstFromFar[far, 'domain'];
export port = LoadFstFromFar[far, 'port'];
export path = LoadFstFromFar[far, 'path'];
export query_string = LoadFstFromFar[far, 'query_string'];
export fragment_id = LoadFstFromFar[far, 'fragment_id'];
export concept = LoadFstFromFar[far, 'concept'];
export text = LoadFstFromFar[far, 'text'];
export symbol = LoadFstFromFar[far, 'symbol'];
export num_units = LoadFstFromFar[far, 'num_units'];
export code_switch = LoadFstFromFar[far, 'code_switch'];
export premises = LoadFstFromFar[far, 'premises'];
export subpremises = LoadFstFromFar[far, 'subpremises'];
export dependent_name = LoadFstFromFar[far, 'dependent_name'];
export dependent_locality = LoadFstFromFar[far, 'dependent_locality'];
export subadmin_area = LoadFstFromFar[far, 'subadmin_area'];
export graphemes = LoadFstFromFar[far, 'graphemes'];
export pass_hours = LoadFstFromFar[far, 'pass_hours'];
export pass_minutes = LoadFstFromFar[far, 'pass_minutes'];
export pass_speak_period = LoadFstFromFar[far, 'pass_speak_period'];
export style1 = LoadFstFromFar[far, 'style1'];
export style2 = LoadFstFromFar[far, 'style2'];
export style3 = LoadFstFromFar[far, 'style3'];
export style4 = LoadFstFromFar[far, 'style4'];
export style5 = LoadFstFromFar[far, 'style5'];
export any_style = LoadFstFromFar[far, 'any_style'];
export concise_emoji_true = LoadFstFromFar[far, 'concise_emoji_true'];
export speak_period_true = LoadFstFromFar[far, 'speak_period_true'];
export speak_period_false = LoadFstFromFar[far, 'speak_period_false'];
export duration_true = LoadFstFromFar[far, 'duration_true'];
export negative_true = LoadFstFromFar[far, 'negative_true'];
export negative_false = LoadFstFromFar[far, 'negative_false'];
export definite_article_true = LoadFstFromFar[far, 'definite_article_true'];
export kNotRecSep = LoadFstFromFar[far, 'kNotRecSep'];
export CARDINAL_0_999 = LoadFstFromFar[far, 'CARDINAL_0_999'];
export CARDINAL_NO_SEP_FROM_1000 = LoadFstFromFar[far, 'CARDINAL_NO_SEP_FROM_1000'];
export CARDINAL_NO_SEP = LoadFstFromFar[far, 'CARDINAL_NO_SEP'];
export CARDINAL_SPACE_FROM_1000 = LoadFstFromFar[far, 'CARDINAL_SPACE_FROM_1000'];
export CARDINAL_COMMA_FROM_1000 = LoadFstFromFar[far, 'CARDINAL_COMMA_FROM_1000'];
export CARDINAL = LoadFstFromFar[far, 'CARDINAL'];
export CARDINAL_COMMA_SEP = LoadFstFromFar[far, 'CARDINAL_COMMA_SEP'];
export CARDINAL_MAX = LoadFstFromFar[far, 'CARDINAL_MAX'];
export SIGNED_CARDINAL = LoadFstFromFar[far, 'SIGNED_CARDINAL'];
export SIGNED_CARDINAL_COMMA_SEP = LoadFstFromFar[far, 'SIGNED_CARDINAL_COMMA_SEP'];
export SIGNED_CARDINAL_MAX = LoadFstFromFar[far, 'SIGNED_CARDINAL_MAX'];
export CARDINAL_COMMA_MARKUP = LoadFstFromFar[far, 'CARDINAL_COMMA_MARKUP'];
export CARDINAL_MARKUP = LoadFstFromFar[far, 'CARDINAL_MARKUP'];
export CARDINAL_MAX_MARKUP = LoadFstFromFar[far, 'CARDINAL_MAX_MARKUP'];
export CARDINAL_DOT_FROM_1000 = LoadFstFromFar[far, 'CARDINAL_DOT_FROM_1000'];
export CARDINAL_DOT = LoadFstFromFar[far, 'CARDINAL_DOT'];
export CARDINAL_DOT_MAX = LoadFstFromFar[far, 'CARDINAL_DOT_MAX'];
export CARDINAL_DOT_LOOSE = LoadFstFromFar[far, 'CARDINAL_DOT_LOOSE'];
export SIGNED_CARDINAL_DOT = LoadFstFromFar[far, 'SIGNED_CARDINAL_DOT'];
export SIGNED_CARDINAL_DOT_MAX = LoadFstFromFar[far, 'SIGNED_CARDINAL_DOT_MAX'];
export SIGNED_CARDINAL_DOT_LOOSE = LoadFstFromFar[far, 'SIGNED_CARDINAL_DOT_LOOSE'];
export CARDINAL_DOT_MARKUP = LoadFstFromFar[far, 'CARDINAL_DOT_MARKUP'];
export CARDINAL_DOT_MAX_MARKUP = LoadFstFromFar[far, 'CARDINAL_DOT_MAX_MARKUP'];
export CARDINAL_DOT_LOOSE_MARKUP = LoadFstFromFar[far, 'CARDINAL_DOT_LOOSE_MARKUP'];
export CARDINAL_APOSTROPHE_FROM_1000 = LoadFstFromFar[far, 'CARDINAL_APOSTROPHE_FROM_1000'];
export CARDINAL_APOSTROPHE = LoadFstFromFar[far, 'CARDINAL_APOSTROPHE'];
export CARDINAL_APOSTROPHE_MAX = LoadFstFromFar[far, 'CARDINAL_APOSTROPHE_MAX'];
export SIGNED_CARDINAL_APOSTROPHE = LoadFstFromFar[far, 'SIGNED_CARDINAL_APOSTROPHE'];
export SIGNED_CARDINAL_APOSTROPHE_MAX = LoadFstFromFar[far, 'SIGNED_CARDINAL_APOSTROPHE_MAX'];
export CARDINAL_APOSTROPHE_MARKUP = LoadFstFromFar[far, 'CARDINAL_APOSTROPHE_MARKUP'];
export CARDINAL_APOSTROPHE_MAX_MARKUP = LoadFstFromFar[far, 'CARDINAL_APOSTROPHE_MAX_MARKUP'];
export S_ASIAN_CARDINAL = LoadFstFromFar[far, 'S_ASIAN_CARDINAL'];
export S_ASIAN_CARDINAL_MARKUP = LoadFstFromFar[far, 'S_ASIAN_CARDINAL_MARKUP'];
export SIGNED_S_ASIAN_CARDINAL = LoadFstFromFar[far, 'SIGNED_S_ASIAN_CARDINAL'];
export SIGNED_S_ASIAN_CARDINAL_MARKUP = LoadFstFromFar[far, 'SIGNED_S_ASIAN_CARDINAL_MARKUP'];
export TOKEN_CARDINAL_MARKUP = LoadFstFromFar[far, 'TOKEN_CARDINAL_MARKUP'];
export RANGE_CONNECTOR = LoadFstFromFar[far, 'RANGE_CONNECTOR'];
export CARDINAL_RANGE = LoadFstFromFar[far, 'CARDINAL_RANGE'];
export CARDINAL_DOT_RANGE = LoadFstFromFar[far, 'CARDINAL_DOT_RANGE'];
export YEAR_RANGE = LoadFstFromFar[far, 'YEAR_RANGE'];
export MEASURE_RANGE = LoadFstFromFar[far, 'MEASURE_RANGE'];
export MEASURE_DOT_RANGE = LoadFstFromFar[far, 'MEASURE_DOT_RANGE'];
export FRACTION_RANGE = LoadFstFromFar[far, 'FRACTION_RANGE'];
export TIME_RANGE = LoadFstFromFar[far, 'TIME_RANGE'];
export TIME_DOT_RANGE = LoadFstFromFar[far, 'TIME_DOT_RANGE'];
export RANGE_MARKUP = LoadFstFromFar[far, 'RANGE_MARKUP'];
export RANGE_DOT_MARKUP = LoadFstFromFar[far, 'RANGE_DOT_MARKUP'];
export YEARS_RANGE = LoadFstFromFar[far, 'YEARS_RANGE'];
export MATCH_RESULT = LoadFstFromFar[far, 'MATCH_RESULT'];
export FORMATIONS = LoadFstFromFar[far, 'FORMATIONS'];
export MULTI_D_MEASURE = LoadFstFromFar[far, 'MULTI_D_MEASURE'];
export MULTI_D_DOT_MEASURE = LoadFstFromFar[far, 'MULTI_D_DOT_MEASURE'];
export RATIO_MARKUP = LoadFstFromFar[far, 'RATIO_MARKUP'];
export RATIO_DOT_MARKUP = LoadFstFromFar[far, 'RATIO_DOT_MARKUP'];
export BY_MARKUP = LoadFstFromFar[far, 'BY_MARKUP'];
export BY_DOT_MARKUP = LoadFstFromFar[far, 'BY_DOT_MARKUP'];
export CONNECTOR_MARKUP = LoadFstFromFar[far, 'CONNECTOR_MARKUP'];
export CONNECTOR_DOT_MARKUP = LoadFstFromFar[far, 'CONNECTOR_DOT_MARKUP'];
export CONSECUTIVE_YEAR_MARKUP = LoadFstFromFar[far, 'CONSECUTIVE_YEAR_MARKUP'];
export markup_weekday = LoadFstFromFar[far, 'markup_weekday'];
export markup_day = LoadFstFromFar[far, 'markup_day'];
export markup_month = LoadFstFromFar[far, 'markup_month'];
export markup_year = LoadFstFromFar[far, 'markup_year'];
export markup_era = LoadFstFromFar[far, 'markup_era'];
export date_day = LoadFstFromFar[far, 'date_day'];
export date_month = LoadFstFromFar[far, 'date_month'];
export separator = LoadFstFromFar[far, 'separator'];
export AMBIGUOUS = LoadFstFromFar[far, 'AMBIGUOUS'];
export YEAR_ONLY = LoadFstFromFar[far, 'YEAR_ONLY'];
export YEAR_DECADE = LoadFstFromFar[far, 'YEAR_DECADE'];
export YMD = LoadFstFromFar[far, 'YMD'];
export FULL_DATE = LoadFstFromFar[far, 'FULL_DATE'];
export DATE = LoadFstFromFar[far, 'DATE'];
export DATE_WITH_AMBIGUOUS = LoadFstFromFar[far, 'DATE_WITH_AMBIGUOUS'];
export DISAMBIGUATE_DMY = LoadFstFromFar[far, 'DISAMBIGUATE_DMY'];
export DISAMBIGUATE_MDY = LoadFstFromFar[far, 'DISAMBIGUATE_MDY'];
export NEGATIVE = LoadFstFromFar[far, 'NEGATIVE'];
export FRACTIONAL_PART = LoadFstFromFar[far, 'FRACTIONAL_PART'];
export QUANTITY = LoadFstFromFar[far, 'QUANTITY'];
export INTEGER_DECIMAL = LoadFstFromFar[far, 'INTEGER_DECIMAL'];
export INTEGER_DECIMAL_MAX = LoadFstFromFar[far, 'INTEGER_DECIMAL_MAX'];
export INTEGER_DECIMAL_DOT = LoadFstFromFar[far, 'INTEGER_DECIMAL_DOT'];
export INTEGER_DECIMAL_DOT_MAX = LoadFstFromFar[far, 'INTEGER_DECIMAL_DOT_MAX'];
export DECIMAL = LoadFstFromFar[far, 'DECIMAL'];
export DECIMAL_MAX = LoadFstFromFar[far, 'DECIMAL_MAX'];
export DECIMAL_DOT = LoadFstFromFar[far, 'DECIMAL_DOT'];
export DECIMAL_DOT_MAX = LoadFstFromFar[far, 'DECIMAL_DOT_MAX'];
export S_ASIAN_DECIMAL = LoadFstFromFar[far, 'S_ASIAN_DECIMAL'];
export DECIMAL_MARKUP = LoadFstFromFar[far, 'DECIMAL_MARKUP'];
export DECIMAL_DOT_MARKUP = LoadFstFromFar[far, 'DECIMAL_DOT_MARKUP'];
export INTEGER_DECIMAL_MARKUP = LoadFstFromFar[far, 'INTEGER_DECIMAL_MARKUP'];
export INTEGER_DECIMAL_DOT_MARKUP = LoadFstFromFar[far, 'INTEGER_DECIMAL_DOT_MARKUP'];
export DECIMAL_MAX_MARKUP = LoadFstFromFar[far, 'DECIMAL_MAX_MARKUP'];
export DECIMAL_DOT_MAX_MARKUP = LoadFstFromFar[far, 'DECIMAL_DOT_MAX_MARKUP'];
export INTEGER_DECIMAL_MAX_MARKUP = LoadFstFromFar[far, 'INTEGER_DECIMAL_MAX_MARKUP'];
export INTEGER_DECIMAL_DOT_MAX_MARKUP = LoadFstFromFar[far, 'INTEGER_DECIMAL_DOT_MAX_MARKUP'];
export S_ASIAN_DECIMAL_MARKUP = LoadFstFromFar[far, 'S_ASIAN_DECIMAL_MARKUP'];
export DIGIT = LoadFstFromFar[far, 'DIGIT'];
export DIGIT_MARKUP = LoadFstFromFar[far, 'DIGIT_MARKUP'];
export CONTEXT_DIGIT_ONLY = LoadFstFromFar[far, 'CONTEXT_DIGIT_ONLY'];
export CONTEXT_DIGIT_ONLY_MARKUP = LoadFstFromFar[far, 'CONTEXT_DIGIT_ONLY_MARKUP'];
export CONTEXT_DIGIT_TENS_MARKUP = LoadFstFromFar[far, 'CONTEXT_DIGIT_TENS_MARKUP'];
export SPACED_DIGIT_MARKUP = LoadFstFromFar[far, 'SPACED_DIGIT_MARKUP'];
export CONTEXT_DIGIT_MARKUP = LoadFstFromFar[far, 'CONTEXT_DIGIT_MARKUP'];
export url_classifier = LoadFstFromFar[far, 'url_classifier'];
export PROTOCOL_PARSER = LoadFstFromFar[far, 'PROTOCOL_PARSER'];
export ADDRESSES = LoadFstFromFar[far, 'ADDRESSES'];
export ELECTRONIC_MARKUP = LoadFstFromFar[far, 'ELECTRONIC_MARKUP'];
export FRACTION = LoadFstFromFar[far, 'FRACTION'];
export FRACTION_ONLY_MARKUP = LoadFstFromFar[far, 'FRACTION_ONLY_MARKUP'];
export FRACTION_MARKUP = LoadFstFromFar[far, 'FRACTION_MARKUP'];
export FRACTION_DOT_MARKUP = LoadFstFromFar[far, 'FRACTION_DOT_MARKUP'];
export LSEQ_MARKUP = LoadFstFromFar[far, 'LSEQ_MARKUP'];
export TRAILING_MODIFIER = LoadFstFromFar[far, 'TRAILING_MODIFIER'];
export FORCE_LSEQ = LoadFstFromFar[far, 'FORCE_LSEQ'];
export FORCE_LSEQ_CASELESS = LoadFstFromFar[far, 'FORCE_LSEQ_CASELESS'];
export INS_FULLSTOPS = LoadFstFromFar[far, 'INS_FULLSTOPS'];
export OS_LSEQ = LoadFstFromFar[far, 'OS_LSEQ'];
export LSEQ_MAY_BE_A_WORD = LoadFstFromFar[far, 'LSEQ_MAY_BE_A_WORD'];
export LSEQ = LoadFstFromFar[far, 'LSEQ'];
export LETTER_NUM_SEQ = LoadFstFromFar[far, 'LETTER_NUM_SEQ'];
export LSEQ_FULLSTOPS = LoadFstFromFar[far, 'LSEQ_FULLSTOPS'];
export CAPITAL_NUM_SEQ = LoadFstFromFar[far, 'CAPITAL_NUM_SEQ'];
export UNIT_PREFIXES_ALL = LoadFstFromFar[far, 'UNIT_PREFIXES_ALL'];
export BINARY_PREFIX = LoadFstFromFar[far, 'BINARY_PREFIX'];
export DANGEROUS_UNITS = LoadFstFromFar[far, 'DANGEROUS_UNITS'];
export SI_UNITS = LoadFstFromFar[far, 'SI_UNITS'];
export ENGLISH_UNITS = LoadFstFromFar[far, 'ENGLISH_UNITS'];
export MISC_UNITS = LoadFstFromFar[far, 'MISC_UNITS'];
export P2 = LoadFstFromFar[far, 'P2'];
export P3 = LoadFstFromFar[far, 'P3'];
export POWERS = LoadFstFromFar[far, 'POWERS'];
export REWRITE_POWERS = LoadFstFromFar[far, 'REWRITE_POWERS'];
export POWER_UNITS = LoadFstFromFar[far, 'POWER_UNITS'];
export COMPASS_DIRECTIONS = LoadFstFromFar[far, 'COMPASS_DIRECTIONS'];
export UNITS_DMS = LoadFstFromFar[far, 'UNITS_DMS'];
export UNITS_DMS_DOT_MAX = LoadFstFromFar[far, 'UNITS_DMS_DOT_MAX'];
export UNITS_FEET_INCHES = LoadFstFromFar[far, 'UNITS_FEET_INCHES'];
export UNITS_FEET_INCHES_DOT_MAX = LoadFstFromFar[far, 'UNITS_FEET_INCHES_DOT_MAX'];
export UNITS_HMS = LoadFstFromFar[far, 'UNITS_HMS'];
export UNITS_HMS_DOT_MAX = LoadFstFromFar[far, 'UNITS_HMS_DOT_MAX'];
export SECOND_TERM_UNITS = LoadFstFromFar[far, 'SECOND_TERM_UNITS'];
export PERS = LoadFstFromFar[far, 'PERS'];
export TWENTYFOUR_H = LoadFstFromFar[far, 'TWENTYFOUR_H'];
export ALL_UNITS = LoadFstFromFar[far, 'ALL_UNITS'];
export MEASURE = LoadFstFromFar[far, 'MEASURE'];
export MEASURE_DOT_MAX = LoadFstFromFar[far, 'MEASURE_DOT_MAX'];
export MEASURE_MARKUP = LoadFstFromFar[far, 'MEASURE_MARKUP'];
export MEASURE_DOT_MAX_MARKUP = LoadFstFromFar[far, 'MEASURE_DOT_MAX_MARKUP'];
export COMPOUND_MEASURES = LoadFstFromFar[far, 'COMPOUND_MEASURES'];
export NORMALIZE_DOLLAR = LoadFstFromFar[far, 'NORMALIZE_DOLLAR'];
export CURRENCY_CHARS = LoadFstFromFar[far, 'CURRENCY_CHARS'];
export CURRENCY_SYMBOLS = LoadFstFromFar[far, 'CURRENCY_SYMBOLS'];
export NORM_CURRENCY_SYMBOLS = LoadFstFromFar[far, 'NORM_CURRENCY_SYMBOLS'];
export ISO4217_CODES = LoadFstFromFar[far, 'ISO4217_CODES'];
export CURRENCY_SYMBOL_MARKUP = LoadFstFromFar[far, 'CURRENCY_SYMBOL_MARKUP'];
export ISO4217_CODE_MARKUP = LoadFstFromFar[far, 'ISO4217_CODE_MARKUP'];
export AMOUNT_MARKUP = LoadFstFromFar[far, 'AMOUNT_MARKUP'];
export MONEY = LoadFstFromFar[far, 'MONEY'];
export MONEY_MARKUP = LoadFstFromFar[far, 'MONEY_MARKUP'];
export REPLACEMENTS = LoadFstFromFar[far, 'REPLACEMENTS'];
export REPLACEMENTS_STRING = LoadFstFromFar[far, 'REPLACEMENTS_STRING'];
export QUANTITY_MARKUP = LoadFstFromFar[far, 'QUANTITY_MARKUP'];
export STRING_QUANTITY_MARKUP = LoadFstFromFar[far, 'STRING_QUANTITY_MARKUP'];
export LOCAL_CURRENCIES = LoadFstFromFar[far, 'LOCAL_CURRENCIES'];
export REMOVE_ZEROES = LoadFstFromFar[far, 'REMOVE_ZEROES'];
export MONEY_MARKUP_EXTRA = LoadFstFromFar[far, 'MONEY_MARKUP_EXTRA'];
export CHARS = LoadFstFromFar[far, 'CHARS'];
export CHAR = LoadFstFromFar[far, 'CHAR'];
export ALL_DIGITS = LoadFstFromFar[far, 'ALL_DIGITS'];
export ALL_TENS = LoadFstFromFar[far, 'ALL_TENS'];
export CONFIDENT_NUMERAL = LoadFstFromFar[far, 'CONFIDENT_NUMERAL'];
export ROMAN_NUMERAL = LoadFstFromFar[far, 'ROMAN_NUMERAL'];
export ACCEPTABLE_NUMERALS = LoadFstFromFar[far, 'ACCEPTABLE_NUMERALS'];
export CONFIDENT_CARDINAL = LoadFstFromFar[far, 'CONFIDENT_CARDINAL'];
export ROMAN_CARDINAL = LoadFstFromFar[far, 'ROMAN_CARDINAL'];
export ROMAN_ORDINAL = LoadFstFromFar[far, 'ROMAN_ORDINAL'];
export LIMITED_ROMAN_CARDINAL = LoadFstFromFar[far, 'LIMITED_ROMAN_CARDINAL'];
export LIMITED_ROMAN_ORDINAL = LoadFstFromFar[far, 'LIMITED_ROMAN_ORDINAL'];
export TRIVIAL_ORDINAL = LoadFstFromFar[far, 'TRIVIAL_ORDINAL'];
export SEPARATOR = LoadFstFromFar[far, 'SEPARATOR'];
export RECOGNIZER = LoadFstFromFar[far, 'RECOGNIZER'];
export PARSER = LoadFstFromFar[far, 'PARSER'];
export PHONE_NUMBER = LoadFstFromFar[far, 'PHONE_NUMBER'];
export PHONE_NUMBER_MARKUP = LoadFstFromFar[far, 'PHONE_NUMBER_MARKUP'];
export TIME_ZONES = LoadFstFromFar[far, 'TIME_ZONES'];
export MARKUP_HOURS = LoadFstFromFar[far, 'MARKUP_HOURS'];
export MARKUP_MINUTES = LoadFstFromFar[far, 'MARKUP_MINUTES'];
export MARKUP_SECONDS = LoadFstFromFar[far, 'MARKUP_SECONDS'];
export MARKUP_MILLISECONDS = LoadFstFromFar[far, 'MARKUP_MILLISECONDS'];
export MARKUP_STYLE1 = LoadFstFromFar[far, 'MARKUP_STYLE1'];
export MARKUP_STYLE2 = LoadFstFromFar[far, 'MARKUP_STYLE2'];
export MARKUP_STYLE4 = LoadFstFromFar[far, 'MARKUP_STYLE4'];
export MARKUP_DURATION = LoadFstFromFar[far, 'MARKUP_DURATION'];
export SPEAK_PERIOD = LoadFstFromFar[far, 'SPEAK_PERIOD'];
export TIME00_59 = LoadFstFromFar[far, 'TIME00_59'];
export HOURS_AM = LoadFstFromFar[far, 'HOURS_AM'];
export HOURS_PM = LoadFstFromFar[far, 'HOURS_PM'];
export HOURS = LoadFstFromFar[far, 'HOURS'];
export HOURS_AM_TO_PM = LoadFstFromFar[far, 'HOURS_AM_TO_PM'];
export HOURS_AM_TO_PM_EX_00 = LoadFstFromFar[far, 'HOURS_AM_TO_PM_EX_00'];
export HOURS_AM_EX_00 = LoadFstFromFar[far, 'HOURS_AM_EX_00'];
export PM = LoadFstFromFar[far, 'PM'];
export AM = LoadFstFromFar[far, 'AM'];
export time_style1 = LoadFstFromFar[far, 'time_style1'];
export STYLE2_AM_PM = LoadFstFromFar[far, 'STYLE2_AM_PM'];
export STYLE2_AM_PM_STRICT = LoadFstFromFar[far, 'STYLE2_AM_PM_STRICT'];
export DURATION = LoadFstFromFar[far, 'DURATION'];
export TIME_ZONE = LoadFstFromFar[far, 'TIME_ZONE'];
export UNIVERSAL_TIME_STYLES = LoadFstFromFar[far, 'UNIVERSAL_TIME_STYLES'];
export TIME_MARKUP = LoadFstFromFar[far, 'TIME_MARKUP'];
export STRICT_TIME_STYLES = LoadFstFromFar[far, 'STRICT_TIME_STYLES'];
export TIME_MARKUP_STRICT = LoadFstFromFar[far, 'TIME_MARKUP_STRICT'];
export SPACE = LoadFstFromFar[far, 'SPACE'];
export PUNCT_TOKEN = LoadFstFromFar[far, 'PUNCT_TOKEN'];
export PHRASE_BREAKS = LoadFstFromFar[far, 'PHRASE_BREAKS'];
export FALLBACK_CHARS = LoadFstFromFar[far, 'FALLBACK_CHARS'];
export FALLBACK_TOKEN = LoadFstFromFar[far, 'FALLBACK_TOKEN'];
export STATE_NAME_MARKUP = LoadFstFromFar[far, 'STATE_NAME_MARKUP'];
export VALID_BYTES_RFC3629 = LoadFstFromFar[far, 'VALID_BYTES_RFC3629'];
export LETTER_MAPPINGS = LoadFstFromFar[far, 'LETTER_MAPPINGS'];
export VERSION_NUMBERS = LoadFstFromFar[far, 'VERSION_NUMBERS'];
export VERBATIM_FORMULA = LoadFstFromFar[far, 'VERBATIM_FORMULA'];
export SPOKEN_PUNCT_MARKUP = LoadFstFromFar[far, 'SPOKEN_PUNCT_MARKUP'];
export EMOTICONS_MARKUP = LoadFstFromFar[far, 'EMOTICONS_MARKUP'];
