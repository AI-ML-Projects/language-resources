# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Classifier for dates.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

markup_day = universal_rules.ins_space universal_func.InvertMarkup[universal_rules.date_day] universal_rules.ins_space;
markup_month = universal_rules.ins_space universal_func.InvertMarkup[universal_rules.date_month]
               universal_rules.ins_space;
markup_year = universal_rules.ins_space universal_func.InvertMarkup[universal_rules.date_year]
              universal_rules.ins_space;

# Days
day = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" |
    "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" |
    "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" |
    "30" | "31";

days = universal_rules.delete_initial_zero @ day;

# Months
month = Optimize[
  ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12")
];

months = universal_rules.delete_initial_zero @ month;

month_name_map =
  (("ජනවාරි" | "ජන.") : "1") |
  (("පෙබරවාරි" | "පෙබ.") : "2") |
  (("මාර්තු" | "මාර්.") : "3") |
  (("අප්‍රේල්" | "අප්‍රේ.") : "4") |
  ("මැයි" : "5") |
  ("ජුනි" : "6") |
  ("ජූලි" : "7") |
  (("අගෝස්තු" | "අගෝ.") : "8") |
  (("සැප්තැම්බර්" | "සැප්.") : "9") |
  (("ඔක්තෝබර්" | "ඔක්.") : "10") |
  (("නොවැම්බර්" | "නොවැ.") : "11") |
  (("දෙසැම්බර්" | "දෙසැ.") : "12");

remove_slash = "/" : "";

month_names = remove_slash? month_name_map remove_slash?;

# Eras
era_names = Optimize[
  (("ක්‍රිස්තු පූර්ව" | "ක්‍රි.පූ" (".")?) | "ක්රි.පූ" (".")? : "BC") |
  (("ක්‍රිස්තු වර්ෂ" | "ක්‍රි.ව" (".")?) | "ක්රි.ව" (".")? : "AD") |
  (("බුද්ධ වර්ෂ" | "බු.ව" "."?) : "BE")    # Buddhist Era.
];

era = Optimize[
  universal_rules.clear_space_star
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.date_era]
  universal_rules.ins_space
  universal_rules.ins_quote
  era_names
  universal_rules.ins_quote
];

date_markup = Optimize[
  universal_func.InvertMarkup[universal_rules.date] universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.opening_brace]
  universal_rules.sigma_star universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.closing_brace]
];

# Year could be 2-digit or 4-digit long.
year = universal_rules.kDigit{2,4};

export YEAR_ONLY_MARKUP = Optimize[
  (markup_year (("1" | "2") universal_rules.kDigit{3})) @
  date_markup
];
separator = ("/" | "-" | ".") : "";

# 4/5/2000, 4-5-2000, 4.5.2000
dmy1 = markup_day days
       separator markup_month (months | month_names)
       separator markup_year year;

# 4 ජනවාරි 2000
dmy2 = Optimize[
  markup_day days
  universal_rules.clear_space_plus
  markup_month month_names
  universal_rules.clear_space_plus
  markup_year year
];

# ජනවාරි 4, 2000 or ජනවාරි 4.
dmy3 = Optimize[
  markup_month month_names
  universal_rules.clear_space_plus
  markup_day days
  (("," : "") universal_rules.clear_space_plus markup_year year)?
];

# 2000/12/31, 2000-12-31, 2000.12.31
ymd1 = markup_year year separator
       markup_month (months | month_names) separator
       markup_day days;

# ක්‍රි.ව 2000 ජනවාරි 4 (era year month day).
ymd2 = Optimize[
  (era universal_rules.clear_space_star)?
  markup_year year
  universal_rules.clear_space_plus
  markup_month month_names
  universal_rules.clear_space_plus
  markup_day days
];

# 2000 ජනවාරි (Year Month).
ym = markup_year year universal_rules.clear_space_plus markup_month month_names;

# Era and year.
ey = era universal_rules.clear_space_star markup_year year;

export style1 = Optimize[
  (dmy1 | dmy2 | dmy3)
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.style1]
  universal_rules.ins_space
];

export style2 = Optimize[
  (ymd1 | ymd2 | ym | ey)
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.style2]
  universal_rules.ins_space
];

export DATE_MARKUP = Optimize[
  (universal_func.InvertMarkup[universal_rules.date]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.opening_brace]
  (style1 | style2)
  universal_func.InvertMarkup[universal_rules.closing_brace]) @
  universal_rules.CLEAN_SPACES
];
