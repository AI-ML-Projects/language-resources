# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

prefix = (
           ("කි" : "kilo") |
           ("සෙ" : "centi") |
           ("මි" : "milli") |
           ("මෙ" : "mega") |
           ("ගි" : "giga") |
           universal_rules.UNIT_PREFIXES_ALL
         ) ("." : "")?;

unit = (
         ("ලී" : "liter") |
         ("මී" : "meter") |
         ("ග්‍රෑ" : "gram") |
         ("සැ" : "mile") |
         ("බ" : "byte") |
         ("W" : "watt") |
         universal_rules.ALL_UNITS
       ) ("." : "")?;

time_units = (
               (("පැ" | "පැය") : "hour") |
               (("මි" | "මිනි") : "minute") |
               (("තත්" | "ත") : "second") |
               ("අවු" : "year")
             ) ("." : "")?;

# Unit can be enclosed in brackets, e.g. (k.m.) or (කි.මී.)
brackets = (("(" : "")? prefix? unit (")" : "")?);

# For cases like km/h
symbols = ("/" : " per ");
si_units = brackets |
           (brackets symbols unit);

square = ("" : "square ") si_units (("²" | "2" | "^2") : "");
cubic = ("" : "cubic ") si_units (("³" | "3" | "^3") : "");
power = square | cubic;

# When units written in Sinhala it precedes the number. English unit follows the
# number.
func FlipPositions[units, number] {
  return Optimize[
           (universal_func.UnitMarkup[units]
            universal_rules.clear_space_star
            number
            universal_rules.ins_space) |
           (universal_rules.ins_space
            number
            universal_rules.clear_space_star
            universal_func.UnitMarkup[units])
         ];
}

all_units = si_units | power | time_units;

number = Optimize[
    (universal_rules.INTEGER_DECIMAL_MARKUP | universal_rules.FRACTION_MARKUP)
  @ universal_rules.CLEAN_SPACES
];
export MEASURE = Optimize[universal_func.UnitMarkup[all_units] number];
export MEASURE_MARKUP = Optimize[
  (universal_func.InvertMarkup[universal_rules.measure]
  universal_rules.ins_space
  universal_func.InvertMarkup[universal_rules.opening_brace]
  FlipPositions[all_units, number]
  universal_func.InvertMarkup[universal_rules.closing_brace]) @ universal_rules.CLEAN_SPACES
];
