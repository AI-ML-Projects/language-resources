# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Parser for tokens connecting other tokens.
# For example ranges: 5-6
#             ratios: 1:1
#             by: 4x2

import 'date.grm' as date ;
import 'measure.grm' as measure ;
import 'money.grm' as money ;
import 'time.grm' as time ;
import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

# utility functions
################################################################################
func connectorMarkup[connector]{
  return(
   universal_rules.token_delimiter
   universal_func.InvertMarkup[universal_rules.connector]
   universal_rules.ins_space
   universal_func.InvertMarkup[universal_rules.opening_brace]
   universal_rules.ins_space
   universal_func.InvertMarkup[universal_rules.connector_type]
   universal_rules.ins_space
   universal_rules.ins_quote
   universal_rules.del_space_star
   connector
   universal_rules.del_space_star
   universal_rules.ins_quote
   universal_rules.ins_space
   universal_func.InvertMarkup[universal_rules.closing_brace]
   universal_rules.ins_space
   universal_rules.token_delimiter);
}

func connector_multicontext[connector, l_context, r_context]{
return (
        r_context universal_rules.del_space_star
        connector
        universal_rules.del_space_star l_context
       );
}

range_connector = connectorMarkup[(("-" | "—" | "–") : "range")];
ratio_connector = connectorMarkup[":" : "ratio"];

year_range =  connector_multicontext[
  range_connector,
  date.DATE_MARKUP,
  (date.DATE_MARKUP | universal_rules.CARDINAL_MARKUP)
];

time_range = connector_multicontext[
  range_connector,
  (time.TIME_MARKUP | universal_rules.CARDINAL_MARKUP),
  time.TIME_MARKUP];

measure_range = connector_multicontext[
  range_connector,
  (measure.MEASURE_MARKUP | universal_rules.CARDINAL_MARKUP | universal_rules.DECIMAL_MARKUP),
  measure.MEASURE_MARKUP];

money_range = connector_multicontext[
  range_connector,
  (money.MONEY_MARKUP | universal_rules.CARDINAL_MARKUP | universal_rules.DECIMAL_MARKUP),
  money.MONEY_MARKUP];

# For things like 1:2:3.
multiple_ratios = connector_multicontext[
  ratio_connector,
  universal_rules.RATIO_MARKUP,
  universal_rules.CARDINAL_MARKUP
];

export NEPALI_MARKUP =
  year_range
| time_range
| measure_range
| money_range
| multiple_ratios;

export CONNECTOR_MARKUP = Optimize[
  ((universal_rules.CONNECTOR_MARKUP |
    NEPALI_MARKUP))
  @ universal_rules.CLEAN_SPACES];
