# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Parser for Nepali time.
# Basically, combine universal time markup with added support for dot (.)
# separator and Nepali a.m and p.m (बिहान and अपरान्ह).

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

separator = universal_rules.del_space_star (":" : "") universal_rules.del_space_star;

# Dot (.) separator is also used in Nepali.
# Replaces "." with ":" as we allow both the "8.00" and "08:00" formats.
possible_dot =
  CDRewrite["." : ":", "", universal_rules.kDigit,
    universal_rules.sigma_star];

# 12h time format will definitely have a.m. or p.m. indicator because of that
# times with dot will not be confused with decimals.
nepali_am = ("बिहान" | "पूर्वान्ह") : "";
nepali_pm = ("अपरान्ह") : "";

minute_and_optional_second =
  universal_rules.MARKUP_MINUTES universal_rules.TIME00_59 (separator universal_rules.MARKUP_SECONDS universal_rules.TIME00_59)?;

# Time with time indicator; may or may not have 'minute' and 'second' parts.
# May also use "." as a separator (since it's rather unambiguous).
style_with_am_indicator = Optimize[
  universal_rules.MARKUP_HOURS
  universal_rules.HOURS
  ((possible_dot @ (separator minute_and_optional_second)?) |
   (separator minute_and_optional_second))
  universal_rules.del_space_star
  nepali_am
  universal_rules.SPEAK_PERIOD
  universal_rules.MARKUP_STYLE2
];

style_with_pm_indicator = Optimize[
  universal_rules.MARKUP_HOURS
  (universal_rules.HOURS @ universal_rules.HOURS_AM_TO_PM)
  ((possible_dot @ (separator minute_and_optional_second)?) |
   (separator minute_and_optional_second))
  universal_rules.del_space_star
  nepali_pm
  universal_rules.SPEAK_PERIOD
  universal_rules.MARKUP_STYLE2
];

# Time without time indicator; MUST have at least 'hour' and 'minute' parts.
style_without_indicator = Optimize[
  universal_rules.MARKUP_HOURS
  universal_rules.HOURS
  (possible_dot @ (separator minute_and_optional_second) |
   (separator minute_and_optional_second))
  universal_rules.MARKUP_STYLE1
];

nepali_time =
  style_with_am_indicator | style_with_pm_indicator | style_without_indicator
;

export TIME_MARKUP = Optimize[
  (universal_func.InvertMarkup[universal_rules.time]
   universal_rules.ins_space
   universal_func.InvertMarkup[universal_rules.opening_brace]
   (universal_rules.style1 | nepali_time)
   universal_rules.TIME_ZONE?
   universal_func.InvertMarkup[universal_rules.closing_brace])
  @ universal_rules.CLEAN_SPACES
];
