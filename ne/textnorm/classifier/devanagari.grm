# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Grammar for legal Devanagari words.
#
# This is not complete since we also need to deal with various funky
# normalization issues

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

# Devanagari, like all Brahmi-derived alphasyllabaries, is based on the "aksara"
# which, loosely speaking, is an "orthographic syllable" of the form:
#
# C* V (M | H)?
#
# Where "M" and "H" are nasalization and visarga (final voiceless /h/),
# respectively. If C* = 0, then the V in most Brahmi-derived scripts is written
# with a full vowel symbol. Otherwise it is written with a vowel diacritic ---
# unless it is the "inherent vowel", which is not indicated at all. If C* =
# C^{2,}, then different scripts use different strategies for representing the
# sequence. In Devanagari, the strategy is basically to ligature each consonant
# to the following consonant. In Kannada, the first consonant is written inline,
# and the remaining ones as subscripts. However, fortunately, Unicode represents
# these all uniformly internally with the use of "virama", the cancellation
# mark, which is also used to cancel the inherent vowel if no other vowel mark
# is used.
#
# Thus for example
#
# भ्रमण
#
# "bh r a m a n. a"
#
# is represented as
#
# भ DEVANAGARI LETTER BHA
# ् DEVANAGARI SIGN VIRAMA
# र DEVANAGARI LETTER RA
# म DEVANAGARI LETTER MA
# ण DEVANAGARI LETTER NNA
#
# One difference between Devanagari (at least as it is used for Hindi) and other
# related scripts is that in Devanagari one can have an aksara in a word
# immediately followed by a vowel-initial aksara, so that one can get two vowels
# in sequence. This is not possible in, say, Kannada.
#
# See:
#
# Daniels, P and Bright, W. 1996. The World's Writing Systems. Oxford, Oxford
# University Press.
#
# Sproat, R. "Brahmi-Derived Scripts, Script Layout, and Phonological
# Awareness." Written Language and Literacy, 9(1), 45--66, 2006.
#
# for further details on how these scripts work. But in general to build
# something for, say, Kannada or Tamil, or Bangla, one would simply define the
# variables V, Vd, C, virama, M, H and (ahem) om, appropriately for the script,
# and the remainder of the grammars should be the same.

## Full vowels, with Nepali phonetic values

export V =
     "अ"  # ə
   | "आ"  # aː
   | "इ"  # ɪ
   | "ई"  # iː
   | "उ"  # ʊ
   | "ऊ"  # uː
   | "ए"  # eː
   | "ऐ"  # ɛː
   | "ओ"  # oː
   | "औ"  # ɔː
  # | "ऑ"  # ɔː  # Not used in Nepali
  # | "ऒ"  # oː  # Not used in Nepali
  # | "ऎ"  # ɛː   # Not used in Nepali
  ##| "ऄ"  # ə    # Not used in Nepali
;

## Diacritic vowels. These are hard to display on their own so we represent them
## using the utf8 byte sequences. When we map to pronunciation, we use
## "[cancel]" to delete the previous inherent vowels. The last one is virama,
## which has no phonetic value and just cancels the previous vowel.

export VD =
    "[224][164][190]"  # aː
  | "[224][164][191]"  # ɪ
  | "[224][165][128]"  # iː
  | "[224][165][129]"  # ʊ
  | "[224][165][130]"  # uː
  | "[224][165][131]"  # rɪ
  | "[224][165][135]"  # eː
  | "[224][165][136]"  # ɛː
  | "[224][165][137]"  # ɔː
  | "[224][165][139]"  # oː
  | "[224][165][140]"  # ɔː
;

#  | "[224][165][133]"  # candra e    Not used in Nepali
#  | "[224][165][134]"  # short e     Not used in Nepali
#  | "[224][165][138]"  # o           Not used in Nepali

virama = "[224][165][141]";
nukta = "[224][164][188]";

export VIRAMA = virama;
export NUKTA = nukta;

C_no_nukta =
    "ऋ"  # rɪ
  | "ॠ"  # rɪ
  | "क़"  # kə.
  | "क"  # kə
  | "ख"  # kʰə
  | "ग"  # ɡə
  | "घ"  # ɡʱə
# Devanagari symbol for ŋə, used in Nepali as a nasalization as Pancham Barna
  | "ङ"  # ɖə
  | "च"  # t͡ʃə
  | "छ"  # t͡ʃʰə
  | "ज"  # d͡ʒə
  | "झ"  # d͡ʒʱə
# Devanagari symbol for ɲə
  | "ञ"  # jə
  | "ट"  # ʈə
  | "ठ"  # ʈʰə
  | "ड"  # ɖə
  | "ढ"  # ɖʱə
  | "ण"  # ɳə
  | "त"  # t̪ə
  | "थ"  # t̪ʰə
  | "द"  # d̪ə
  | "ध"  # d̪ʱə
  | "न"  # nə
  | "प"  # pə
# Can be pronounced pʰə by some speakers:
  | "फ"  # fə.
  | "ब"  # bə
  | "भ"  # bʱə
  | "म"  # mə
  | "य"  # jə
  | "र"  # rə
  | "ल"  # lə
  | "व"  # ʋə
  | "श"  # ʃə
  | "ष"  # ʃə
  | "स"  # sə
  | "ह"  # hə
;


export C = C_no_nukta ;

export M =
    "[224][164][129]"  # \u0303. candrabindu -> nazalization
  | "[224][164][130]"  # \u0303. anusvara -> nazalization
;

h = "[224][164][131]";  # h /h/ visarga

export VISARGA = h;

# visarga(ः), at times, is written out as a colon and not as the UTF-8
# character ः, as both appear the same. But as that affects verbalization,
# we rewrite the colon to a visarga
colon = ":" : h;

N =
    "०"
  | "१"
  | "२"
  | "३"
  | "४"
  | "५"
  | "६"
  | "७"
  | "८"
  | "९"
;

## Finally, life would not be complete without Om:

om = "ॐ";
export OM = om;

################################################################################
## WHAT FOLLOWS SHOULD WORK FOR ANY BRAHMI-DERIVED SCRIPT.

## Aksara definitions. VD? because may just have inherent vowel

aksara_c = (C virama)* C VD? (M | h | colon)?;

aksara_v = V (M | h)?;

## Clean up rules.
## Delete nukta anywhere else

kill_spurious_nukta =
 CDRewrite[nukta : "", C_no_nukta , "", universal_rules.sigma_star]
;

## You cannot have a virama followed by a vowel
kill_virama =
  CDRewrite[virama : "", "" , VD | V, universal_rules.sigma_star]
;

## You cannot have a dependent vowel after another vowel or anusvara
kill_additional_dependent_vowels =
  CDRewrite[VD : "", VD | V | M, "", universal_rules.sigma_star]
;


## This is temporary: it is quite common to get junk, basically stray bytes**,
## in Indic script input. This sort of thing ought to be handled by the
## normalizer (see above), but for now we map junk to "[junk]"
##
## **stray bytes are small samosas that appear randomly on platters.

junk = (universal_rules.kBytes <100000>)+ : "[junk]";

aksara = Optimize[
   kill_spurious_nukta
 @ kill_virama
 @ kill_additional_dependent_vowels
 @ (aksara_c | aksara_v | junk)]
;

export DELETE_JUNK =
  CDRewrite["[junk]" : "", "", "", (universal_rules.kBytes | "[junk]")*]
;

export NE_ALPHA = C | V;
export WORD = Optimize[aksara+ | om];


## You cannot have a dependent vowel after a number:
kill_dependent_vowel_after_number =
  CDRewrite[VD : "", N, "", universal_rules.sigma_star]
;

## You cannot have an anusvara after a number:
kill_anusvara_after_number =
  CDRewrite[M : "", N, "", universal_rules.sigma_star]
;

# Devanagari numerals mapping.
export DEVANAGARI_NUMERALS_MAPPING = Optimize[
   kill_dependent_vowel_after_number @
   kill_anusvara_after_number @
   (
     ("०" : "0") |
     ("१" : "1") |
     ("२" : "2") |
     ("३" : "3") |
     ("४" : "4") |
     ("५" : "5") |
     ("६" : "6") |
     ("७" : "7") |
     ("८" : "8") |
     ("९" : "9")
   )
];

export DEVANAGARI_NUMERALS_REWRITE = CDRewrite[
  DEVANAGARI_NUMERALS_MAPPING, "", "", universal_rules.sigma_star
];
