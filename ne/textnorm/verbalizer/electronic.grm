# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Verbalizer for electronic items such as URLs and email addresses.
# These will only contain ascii characters and digits...so the rules
# are pretty much like in English.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'verbatim.grm' as verbatim;

# Dot, slash and colon will be transliterated in urls and emails where it is
# translated in verbatim.
dot = "." : "डट";
slash = "/" : "स्ल्यास";
colon = ":" : "कोलन";

electronic_verbatim =
    (("@" | "_" | "-" ) @ verbatim.MAPPINGS) | dot | slash | colon
;

# i.e. Read the abc123 part of abc123@gmail.com.
read_verbatim = universal_rules.ins_space
                ((universal_rules.kNotRecSep - ".")+ @ verbatim.MAPPINGS)
                universal_rules.ins_space;

# Read extensions like html, htm, ftp.
lseq_verbatim = universal_rules.URL_LSEQS @ read_verbatim+;
number_verbatim = universal_rules.kDigit+ @ read_verbatim+;

www_dot =
  "www." : "डब्लु डब्लु डब्लु" universal_rules.ins_space dot universal_rules.ins_space;
# Popular sites which doesn't read letter by letter.
popular_sites =
  StringFile['urls.tsv'];

read_electronic = (
                    (
                      (
                        (www_dot<-1>)?
                        universal_rules.ins_space
                        (
                          (popular_sites <-1>) |
                          (lseq_verbatim) |
                          (number_verbatim<1>) |
                          (electronic_verbatim) |
                          (verbatim.MAPPINGS <2>)
                        )
                        universal_rules.ins_space
                      )+
                    )<1>
                  )*;

# special case to read Twitter hashtags more naturally
read_hashtag = ("#" : " ह्यास ")
               (
                 universal_rules.ins_space
                 (universal_rules.kAlpha+ @ universal_rules.lower_case)
                 ("_" : " ")?
                 universal_rules.ins_space
               )+;

# These domains will be read letter by letter.
np = "np" : "n_letter-en p_letter-en";
edu = "edu" : "e_letter-en d_letter-en u_letter-en";
gov = "gov" : "g_letter-en o_letter-en v_letter-en";
io = "io" : "i_letter-en o_letter-en";
net = "net" : "n_letter-en e_letter-en t_letter-en";

url_suffix = (".com" : dot universal_rules.ins_space "com")
  | (".edu" : dot universal_rules.ins_space edu)
  | (".np" : dot universal_rules.ins_space np)
  | (".org" : dot universal_rules.ins_space "org")
  | (".net" : dot universal_rules.ins_space "net")
  | (".io" : dot universal_rules.ins_space io)
  | (".net.np" : dot universal_rules.ins_space net universal_rules.ins_space dot universal_rules.ins_space np)
  | (".gov.np" : dot universal_rules.ins_space gov universal_rules.ins_space dot universal_rules.ins_space np)
  | (".com.np" : dot universal_rules.ins_space "com" universal_rules.ins_space dot universal_rules.ins_space np)
  | (".mil.np" : dot universal_rules.ins_space "mil" universal_rules.ins_space dot universal_rules.ins_space np)
;

read_domain = read_electronic
              ((url_suffix <-1>) |
               ((("." universal_rules.kAlpha{2}) @ read_verbatim+)<-1>)?);

# Reading of IPv6/MAC addresses; basically just skip the separating characters.
read_address = ((universal_rules.kHex @ read_verbatim) | ((":" | "-") : " sil "))+;

deal_with_dots = CDRewrite[dot, "", "", universal_rules.sigma_star];

protocol = (universal_rules.protocol
            read_verbatim*
            universal_rules.rec_sep) @ deal_with_dots;
username = (universal_rules.username
            (read_electronic | read_hashtag)
            universal_rules.rec_sep) @ deal_with_dots;
password = universal_rules.password
           read_verbatim*
           universal_rules.rec_sep;
domain = (universal_rules.domain
          (read_domain | (read_address<-1>))
          universal_rules.rec_sep) @ deal_with_dots;
# Read the port digit-by-digit
port = universal_rules.port (universal_rules.kDigit+ @ read_verbatim+) universal_rules.rec_sep;
path = universal_rules.path
       read_electronic
       universal_rules.rec_sep;
query_string = universal_rules.query_string
               read_electronic
               universal_rules.rec_sep;
fragment_id = universal_rules.fragment_id
              read_electronic
              universal_rules.rec_sep;

electronic = Optimize[
  (protocol ("" : (universal_rules.ins_space
                   colon
                   universal_rules.ins_space
                   slash
                   universal_rules.ins_space
                   slash
                   universal_rules.ins_space)))?
  (username (("" : " पासवर्ड ") password ("" : " एट "))?)?
  (domain)?
  (("" : " पोर्ट ") port)?
  (path)?
  (("" : " प्रश्न वाचक चिन्ह ") query_string)?
  (("" : " ह्यास ") fragment_id)?
];

export ELECTRONIC_MARKUP = Optimize[
  (universal_rules.semclass_electronic
   electronic
  )
  @ universal_rules.CLEAN_SPACES
];
