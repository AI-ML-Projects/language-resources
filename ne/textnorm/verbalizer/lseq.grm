# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Nepali Verbalizer for letter sequences; read character by character

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

export DEVANAGARI_MAPPINGS = Optimize[
  ("क" : "क_letter") |
  ("ख" : "ख_letter") |
  ("ग" : "ग_letter") |
  ("घ" : "घ_letter") |
  ("ङ" : "ङ_letter") |
  ("च" : "च_letter") |
  ("छ" : "छ_letter") |
  ("ज" : "ज_letter") |
  ("झ" : "झ_letter") |
  ("ञ" : "ञ_letter") |
  ("ट" : "ट_letter") |
  ("ठ" : "ठ_letter") |
  ("ड" : "ड_letter") |
  ("ढ" : "ढ_letter") |
  ("ण" : "ण_letter") |
  ("त" : "त_letter") |
  ("थ" : "थ_letter") |
  ("द" : "द_letter") |
  ("ध" : "ध_letter") |
  ("न" : "न_letter") |
  ("प" : "प_letter") |
  ("फ" : "फ_letter") |
  ("ब" : "ब_letter") |
  ("भ" : "भ_letter") |
  ("म" : "म_letter") |
  ("य" : "य_letter") |
  ("र" : "र_letter") |
  ("ल" : "ल_letter") |
  ("व" : "व_letter") |
  ("श" : "श_letter") |
  ("ष" : "ष_letter") |
  ("स" : "स_letter") |
  ("ह" : "ह_letter") |
  ("अ" : "अ_letter") |
  ("आ" : "आ_letter") |
  ("इ" : "इ_letter") |
  ("ई" : "ई_letter") |
  ("उ" : "उ_letter") |
  ("ऊ" : "ऊ_letter") |
  ("ए" : "ए_letter") |
  ("ऐ" : "ऐ_letter") |
  ("ओ" : "ओ_letter") |
  ("औ" : "औ_letter") |
  ("ऋ" : "ऋ_letter")
];

latin_mappings = Optimize[
  (("a" | "A") : "a_letter-en") |
  (("b" | "B") : "b_letter-en") |
  (("c" | "C") : "c_letter-en") |
  (("d" | "D") : "d_letter-en") |
  (("e" | "E") : "e_letter-en") |
  (("f" | "F") : "f_letter-en") |
  (("g" | "G") : "g_letter-en") |
  (("h" | "H") : "h_letter-en") |
  (("i" | "I") : "i_letter-en") |
  (("j" | "J") : "j_letter-en") |
  (("k" | "K") : "k_letter-en") |
  (("l" | "L") : "l_letter-en") |
  (("m" | "M") : "m_letter-en") |
  (("n" | "N") : "n_letter-en") |
  (("o" | "O") : "o_letter-en") |
  (("p" | "P") : "p_letter-en") |
  (("q" | "Q") : "q_letter-en") |
  (("r" | "R") : "r_letter-en") |
  (("s" | "S") : "s_letter-en") |
  (("t" | "T") : "t_letter-en") |
  (("u" | "U") : "u_letter-en") |
  (("v" | "V") : "v_letter-en") |
  (("w" | "W") : "w_letter-en") |
  (("x" | "X") : "x_letter-en") |
  (("y" | "Y") : "y_letter-en") |
  (("z" | "Z") : "z_letter-en")
];

export MAPPINGS = Optimize[
  DEVANAGARI_MAPPINGS | latin_mappings
];

export MAPPINGS_STAR = Optimize[(MAPPINGS universal_rules.ins_space)*];

# remove any dots from the sequence.
mapping_dot = MAPPINGS_STAR (("." | "'") : "")?;

export LSEQ_MARKUP = Optimize[
  universal_rules.semclass_letters
  universal_rules.letters
  ((mapping_dot universal_rules.ins_space)* @ universal_rules.CLEAN_SPACES)
  universal_rules.rec_sep
];
