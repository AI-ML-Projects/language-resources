# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Verbalizer for money
import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c;
import 'decimal.grm' as d;

negative =
  (universal_rules.negative_true : (c.MINUS_NAME " ")) | (universal_rules.negative_false : "")
;

major_country_data = StringFile['money_country_major.txt'];
minor_country_data = StringFile['money_country_minor.txt'];
major_data = StringFile['money_major.txt'];
minor_data = StringFile['money_minor.txt'];

major_country_markup =
  universal_rules.currency major_country_data universal_rules.rec_sep
;
minor_country_markup =
  universal_rules.currency minor_country_data universal_rules.rec_sep
;

major_markup = universal_rules.currency major_data universal_rules.rec_sep;
minor_markup = universal_rules.currency minor_data universal_rules.rec_sep;

quantities =   ("1000" : "हजार") |
               ("100000" : "लाख") |
               ("1000000" : "दस लाख") |
               ("10000000" : "करोड") |
               ("1000000000" : "अरब") |
               ("100000000000" : "खरब");

# Extract the major part
major = (
          negative?
          universal_rules.integer_part
          c.CARDINAL
          universal_rules.rec_sep
        );

# Extract the minor part
minor = (
          universal_rules.fractional_part
          (("0" : "")* c.CARDINAL)
          universal_rules.rec_sep
        );

# To extract major part only and neglect minor part in case it is 1234.00
amount_major_only = (
                      negative?
                      universal_rules.integer_part
                      c.CARDINAL
                      universal_rules.rec_sep
                      (universal_rules.fractional_part ("0" : "")+
                       universal_rules.rec_sep)?
                    );

# To extract minor part only and neglect major part in case it is 00.1234
amount_minor_only = (
                      negative?
                      (universal_rules.integer_part ("0" : "")+ universal_rules.rec_sep)?
                      universal_rules.fractional_part
                      (universal_rules.non_zero_factorized_number
                       @ (("0" : "")* c.CARDINAL))
                      universal_rules.rec_sep
                    );

# Style 1: 12.50 $ -> बाह्र डलर पचास सेन्ट (Twelve Dollars and Fifty Cents)
style1 = (
           major
           universal_rules.ins_space
           major_markup
           universal_rules.ins_space
           minor
           universal_rules.ins_space
           minor_markup
           universal_rules.style1?
         );

# Style 3: 12.50 USD -> बाह्र संयुक्त राज्य अमेरिका डलर पचास सेन्ट
# We don't have a style2 because the universal money classifier emits only
# style1 and style3.
# (Twelve United States Dollars and Fifty Cents).
style3 = (
           major
           universal_rules.ins_space
           major_country_markup
           universal_rules.ins_space
           minor
           universal_rules.ins_space
           minor_markup
           universal_rules.style3
         );

major_only = (
               ((amount_major_only universal_rules.ins_space major_markup) universal_rules.style1?) |
               (amount_major_only universal_rules.ins_space major_country_markup universal_rules.style3)
             );
minor_only = (
               ((amount_minor_only universal_rules.ins_space minor_markup) universal_rules.style1?) |
               (amount_minor_only universal_rules.ins_space minor_country_markup universal_rules.style3)
             );

# Anything with a quantity. The number part is read as a decimal.
with_quantity = d.DECIMAL
                universal_rules.ins_space universal_rules.quantity quantities universal_rules.ins_space universal_rules.rec_sep
                (
                  (major_country_markup universal_rules.style3) |
                  (major_markup universal_rules.style1?)
                );

export MONEY_MARKUP = Optimize[
  universal_rules.semclass_money
  (style1 | style3 | major_only | minor_only | with_quantity)
];
