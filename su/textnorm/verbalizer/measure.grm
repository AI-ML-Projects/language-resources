# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Sundanese verbalizer for measures.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'decimal.grm' as dc;
import 'fraction.grm' as f;

unit_file = Optimize[StringFile[
  'measurements.tsv'
]];

si_prefix =
  "peta" | "tera" | "giga" | "mega" | "kilo" | ("hecto" : "hekto") |
  ("deca" : "deka") | ("deci" : "desi") | ("centi" : "senti") |
  ("milli" : "mili") | ("micro" : "mikro") | "nano" | ("pico" : "piko")
;

unit_prefix = Optimize[
  si_prefix | Project[universal_rules.BINARY_PREFIX,'output']
];

power2 = CDRewrite["" : " persegi", "[BOS]" "square " universal_rules.sigma_star,
      "[EOS]", universal_rules.sigma_star];
power3 = CDRewrite["" : " kubik", "[BOS]" "cubic " universal_rules.sigma_star,
      "[EOS]", universal_rules.sigma_star];
delpowers = CDRewrite[("square " | "cubic ") : "", "[BOS]",
      "", universal_rules.sigma_star];

unit = Optimize[
    (("square " | "cubic " <1>)? (unit_prefix <1>)? unit_file)
  @ power2 @ power3 @ delpowers
];

# Support for cardinals; treat them exactly like decimals.
c2d =
    CDRewrite["cardinal" : "decimal", "", "", universal_rules.sigma_star]
  @ CDRewrite["integer:" : "integer_part:", "", "", universal_rules.sigma_star]
;

measure =
  universal_rules.semclass_measure
  ((universal_rules.CARDINAL_TO_DECIMAL @ dc.DECIMAL) | f.FRACTION)
  universal_rules.ins_space
  universal_rules.units
  (unit | (unit universal_rules.one_space "per" universal_rules.one_space unit <1>))
  universal_rules.rec_sep
;

over_or_standalone =
  universal_rules.semclass_measure
  universal_rules.ins_space
  universal_rules.units
  "per "? unit
  universal_rules.rec_sep
;

export MEASURE_MARKUP = Optimize[
  measure | over_or_standalone
];
