# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Sundanese time verbalizer.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c;

tabuh =
  universal_rules.morphosyntactic_features
  ("tabuh")
  universal_rules.rec_sep
  universal_rules.ins_space
;

minutes =
    ("0"{1,2} : "")
  | (universal_rules.ins_space ((universal_rules.util_minutes - "0") @ c.CARDINAL))
;

minutes_langkung =
    ("0"{1,2} : "")
  | (universal_func.I[" langkung "] (universal_rules.d1to9 @ c.CARDINAL))
  | (universal_rules.ins_space (universal_rules.util_minutes @ c.CARDINAL)<1>)
;

# Style1: 24 hour format. Default style in classify.
# E.g.
#     "22.45" --> "tabuh dua puluh dua opat puluh lima"
#                 (o'clock twenty two forty five)
style1 = Optimize[
  (tabuh | ("" : "tabuh "))
  universal_rules.hours c.CARDINAL universal_rules.rec_sep
  universal_rules.minutes minutes_langkung universal_rules.rec_sep
  universal_rules.style1
];

# Style2: 12 hour format, verbalized period with special reading for quarters.
# E.g.
#     "02.45 am" --> "tabuh tilu kirang saparapat enjing enjing"
#                    (at three minus fifteen in the morning)
#     "10.22 pm" --> "tabuh sapuluh langkung dua puluh dua wengi"
#                    (at ten plus twenty two in the night)
min_0_9 = ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9");
min_1_30 = (min_0_9 - "0") | (("1" | "2") min_0_9) | "30";
min_1_30_no_quarter = min_1_30 - "15";
min_1_30_no_quarter_and_half = min_1_30_no_quarter - "30";
min_31_59 = (("3" | "4" | "5") min_0_9) - "30";
min_31_59_no_quarter = min_31_59 - "45";

# Verbalizes the hours and minutes along with appropriate period_of_day.
# The "hours" argument indicates whether we need to increment the hour for
# "kirang" minutes, "minutes" handles minute verbalization (langkung/kirang).
func AddHoursMinutesPeriod[hours, minutes] {
  enjing_enjing = "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10";
  siang = "11" | "12" | ("13" : "1") | ("14" : "2");
  sonten  =  ("15" : "3") | ("16" : "4") | ("17" : "5");
  wengi = ("18" : "6" ) | ("19" : "7") | ("20" : "8") | ("21" : "9")
      | ("22" : "10") | ("23" : "11") | (("24" | "0") : "12") | "1" | "2";
  return (
    (
      ((hours @ enjing_enjing @ c.CARDINAL) minutes ("" : " enjing enjing"))
    | ((hours @ siang @ c.CARDINAL) minutes ("" : " siang"))
    | ((hours @ sonten  @ c.CARDINAL) minutes ("" : " sonten"))
    | ((hours @ wengi @ c.CARDINAL) minutes ("" : " wengi"))
    )
  );
}

func AddHoursMinutesPeriodForHalf[hours, minutes] {
  enjing_enjing = "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11";
  siang = "12" | ("13" : "1") | ("14" : "2") | ("15" : "3") ;
  sonten  =  ("16" : "4") | ("17" : "5") | ("18" : "6" );
  wengi = ("19" : "7") | ("20" : "8") | ("21" : "9") | ("22" : "10")
      | ("23" : "11") | (("24" | "0") : "12") | "1" | "2" | "3";
  return (
    (
      (("" : "satengah ") (hours @ enjing_enjing @ c.CARDINAL) minutes
      ("" : " enjing enjing"))
    | (("" : "satengah ") (hours @ siang @ c.CARDINAL) minutes ("" : " siang"))
    | (("" : "satengah ") (hours @ sonten  @ c.CARDINAL) minutes
      ("" : " sonten"))
    | (("" : "satengah ") (hours @ wengi @ c.CARDINAL) minutes ("" : " wengi"))
    )
  );
}

# "langkung" minutes are 0-30, like English "past" in "10 minutes past two"
langkung_minutes_no_quarter =
  ("" : " langkung") universal_rules.minutes (min_1_30_no_quarter_and_half @ minutes)
  universal_rules.rec_sep
;
langkung_quarter =
  ("" : " langkung") universal_rules.minutes
  ("15" : " saparapat") universal_rules.rec_sep
;
langkung_minutes_0 = universal_rules.minutes ("0" : "") universal_rules.rec_sep
;

# "kirang" minutes are 31-59, like English "to" in "10 minutes to two"
kirang_minutes_no_quarter =
  ("" : " kirang") universal_rules.minutes (min_31_59_no_quarter @ universal_rules.subtract_from_60
                                                        @ minutes) universal_rules.rec_sep
;
kirang_quarter =
  ("" : " kirang") universal_rules.minutes ("45" : " saparapat") universal_rules.rec_sep
;
kirang_half = universal_rules.minutes ("30" : "") universal_rules.rec_sep;

hours = universal_rules.hours universal_rules.util_hours universal_rules.rec_sep;
hours_shift = universal_rules.hours universal_rules.hours_shift universal_rules.rec_sep;

style2 = Optimize[
  ("" : "tabuh ")
  (
    AddHoursMinutesPeriodForHalf[hours_shift, kirang_half]
  | AddHoursMinutesPeriod[hours,
                          (
                            langkung_minutes_0
                          | langkung_quarter
                          | langkung_minutes_no_quarter
                          )]
  | AddHoursMinutesPeriod[hours_shift,
                          (kirang_quarter | kirang_minutes_no_quarter)]
  )
  (universal_rules.speak_period_true | universal_rules.speak_period_false)?
  universal_rules.style2?
];

export TIME_MARKUP = Optimize[
  universal_rules.semclass_time
  (style1 | style2)
];
