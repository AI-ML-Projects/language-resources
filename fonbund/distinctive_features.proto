// Copyright 2018 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Basic distinctive features after Jakobson and Chomsky & Halle.

syntax = "proto2";

package fonbund;

// Distinctive feature representation. The client code may convert it to
// string-valued categorical feature, integer or floating-point multi-valued
// feature.
//
// Next available ID: 3
message DistinctiveFeature {
  // Binary representation of distinctive feature value. In Chomsky & Halle's
  // sense a feature can be POSITIVE ("+") or NEGATIVE ("-"). In addition,
  // certain features may not be applicable to any given segment.
  enum BinaryValue {
    // The feature is not applicable to the segment.
    NOT_APPLICABLE = 0;

    // The segment does not possess this feature.
    NEGATIVE = 1;

    // The segment possesses this feature.
    POSITIVE = 2;
  }

  // Representation of a value for multivalued feature. At the moment we keep
  // multivalued features as strings, but other additional forms of encoding
  // are possible.
  // Next available ID: 2
  message MultivaluedValue {
    // The original value encoded as string.
    optional string string_value = 1;
  }

  // Binary feature value.
  optional BinaryValue binary_value = 1;

  // Multivalued feature value.
  optional MultivaluedValue multivalued_value = 2;
}

// The ordered collection of distinctive features.
//
// Next available ID: 2
message DistinctiveFeatureList {
  // Feature values. The number of values corresponds to the number of
  // distinctive features.
  repeated DistinctiveFeature feature = 1;
}

// Representation of all distinctive features describing a particular phonetic
// segment.
//
// Next available ID: 5
message DistinctiveFeatures {
  // Source of the features - this corresponds to the name of the segment feature
  // repository (e.g. PHOIBLE).
  optional string source_name = 1;

  // Names of distinctive features. The dimension of each element in distinctive
  // feature list below has to match the dimension of this array.
  repeated string feature_names = 2;

  // Default value for multivalued feature: Used when the value is missing. This
  // value is copied from the segment configuration.
  optional string multivalued_feature_default_value = 3;

  // A list of ordered collections of distinctive features allows us to model
  // segments of (almost) arbitrary complexity, which is useful in case of
  // diphthongs or extreme cases such as /kǁ͓xʰ/ (Nama).
  repeated DistinctiveFeatureList feature_list = 4;
}

// All distinctive feature representations for a given segment.
//
// Next available ID: 3
message DistinctiveFeatureRepresentations {
  // Name of the segment.
  optional string segment_name = 1;

  // List of all possible representation for a segment, one for each
  // phonological segment inventory.
  repeated DistinctiveFeatures representation = 2;
}

// List of the above, one for each segment.
//
// Next available ID: 2
message SegmentFeatures {
  repeated DistinctiveFeatureRepresentations features = 1;
}
