# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Verbatim grammar for Khmer.
# We mimic rules "cardinal_range" and "decimal_range" in
# "universal/connector.grm" here, but we intepret hyphen or similar characters
# as token { verbatim: "-" }. The reason is because we don't want to pronounce
# hypen with "ទៅ" (to), but we want to pronounce it with "ត្រេ" (dash), which is
# more generic. In cases like "5-2", saying "five to two" is not natural for
# native speakers.
import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

verbatim_markup =
  universal_rules.token_delimiter_del_space_star
  universal_func.InvertMarkup[universal_rules.verbatim]
  universal_rules.ins_space
  universal_rules.ins_quote
  universal_rules.kBytes+
  universal_rules.ins_quote
  universal_rules.token_delimiter_del_space_star
;

range_verbatim = (("-" | "—" | "–") : "-") @ verbatim_markup;

# Limit number ranges to 3 digits each for now, otherwise they tend
# to overmatch on things like telephone numbers.
cardinal_range =
  (universal_rules.kDigit{1,3} @ universal_rules.CARDINAL_MARKUP)
  range_verbatim
  (universal_rules.kDigit{1,3} @ universal_rules.CARDINAL_MARKUP)
;

# Decimal range. Just as "cardinal range": Limit to 3-digit numbers for the same
# reason, and no such limit for "dot" and "dot-max" flavours.
a_decimal =
  (
    universal_rules.kDigit{1,3}
  | ((universal_rules.kDigit+ ("," universal_rules.kDigit{3})*)?
    "." universal_rules.kDigit+)
  ) @ universal_rules.INTEGER_DECIMAL_MARKUP
;
decimal_range = a_decimal range_verbatim a_decimal;

export RANGE_VERBATIM_MARKUP = Optimize[
  (cardinal_range <-1>) | decimal_range
];
