# -*- Thrax -*-

# Copyright 2016, 2017 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

c = SymbolTable['mul_034/Deva.syms'];
g = SymbolTable['mul_034/grapheme.syms'];

codepoint_to_grapheme =
  ("candrabindu".c : "~m".g)
| ("anusvara".c : ";m".g)
| ("visarga".c : ".h".g)
| ("a".c : "a".g)
| ("aa".c : "aa".g)
| ("i".c : "i".g)
| ("ii".c : "ii".g)
| ("u".c : "u".g)
| ("uu".c : "uu".g)
| ("vocalic_r".c : ",r".g)
| ("candra_e".c : "^e".g)
| ("short_e".c : "e".g)
| ("e".c : "ee".g)
| ("ai".c : "ai".g)
| ("candra_o".c : "^o".g)
| ("short_o".c : "o".g)
| ("o".c : "oo".g)
| ("au".c : "au".g)
| ("ka".c : "k".g)
| ("kha".c : "kh".g)
| ("ga".c : "g".g)
| ("gha".c : "gh".g)
| ("nga".c : ";n".g)
| ("ca".c : "c".g)
| ("cha".c : "ch".g)
| ("ja".c : "j".g)
| ("jha".c : "jh".g)
| ("nya".c : "~n".g)
| ("tta".c : ".t".g)
| ("ttha".c : ".th".g)
| ("dda".c : ".d".g)
| ("ddha".c : ".dh".g)
| ("nna".c : ".n".g)
| ("ta".c : "t".g)
| ("tha".c : "th".g)
| ("da".c : "d".g)
| ("dha".c : "dh".g)
| ("na".c : "n".g)
| ("nnna".c : "_n".g)
| ("pa".c : "p".g)
| ("pha".c : "ph".g)
| ("ba".c : "b".g)
| ("bha".c : "bh".g)
| ("ma".c : "m".g)
| ("ya".c : "y".g)
| ("ra".c : "r".g)
| ("rra".c : "_r".g)
| ("la".c : "l".g)
| ("lla".c : ".l".g)
| ("llla".c : "_l".g)
| ("va".c : "v".g)
| ("sha".c : ";s".g)
| ("ssa".c : ".s".g)
| ("sa".c : "s".g)
| ("ha".c : "h".g)
| ("avagraha".c : "'".g)
| ("-aa".c : "aa".g)
| ("-i".c : "i".g)
| ("-ii".c : "ii".g)
| ("-u".c : "u".g)
| ("-uu".c : "uu".g)
| ("-vocalic_r".c : ",r".g)
| ("-vocalic_rr".c : ",rr".g)
| ("-candra_e".c : "^e".g)
| ("-short_e".c : "e".g)
| ("-e".c : "ee".g)
| ("-ai".c : "ai".g)
| ("-candra_o".c : "^o".g)
| ("-short_o".c : "o".g)
| ("-o".c : "oo".g)
| ("-au".c : "au".g)
| ("om".c : "om".g)
| ("qa".c : "q".g)
| ("khha".c : "_kh".g)
| ("ghha".c : ".g".g)
| ("za".c : "z".g)
| ("dddha".c : ".r".g)
| ("rha".c : ".rh".g)
| ("fa".c : "f".g)
| ("yya".c : ";y".g)
| ("vocalic_rr".c : ",rr".g)
| ("-vocalic_l".c : ",l".g)
| ("-vocalic_ll".c : ",ll".g)
| ("candra_a".c : "ae".g)  # maybe define and use "^a".g instead?
| ("gga".c : "\"g".g)
| ("jja".c : "\"j".g)
| ("ddda".c : "\"d".g)
| ("bba".c : "\"b".g)
| ("non-joiner".c : "non-joiner".g)
| ("joiner".c : "joiner".g)
;

codepoint = Optimize[
  Project[codepoint_to_grapheme, 'input']
| "short_a".c
| "nukta".c
| "virama".c
| "non-joiner".c
| "joiner".c
];

eyelash_ra = "^r".g;
zhe = "^z".g;

grapheme = Optimize[
  Project[codepoint_to_grapheme, 'output']
| "@".g
| "ERROR".g
| "non-joiner".g
| "joiner".g
| eyelash_ra
| zhe
];

star = Optimize[(codepoint | grapheme)*];

consonant =
  "ka".c  | "kha".c  | "ga".c  | "gha".c  | "nga".c
| "ca".c  | "cha".c  | "ja".c  | "jha".c  | "nya".c
| "tta".c | "ttha".c | "dda".c | "ddha".c | "nna".c
| "ta".c  | "tha".c  | "da".c  | "dha".c  | "na".c
| "nnna".c
| "pa".c  | "pha".c  | "ba".c  | "bha".c  | "ma".c
| "ya".c  | "ra".c   | "rra".c
| "la".c  | "lla".c  | "llla".c
| "va".c
| "sha".c | "ssa".c  | "sa".c  | "ha".c
| "qa".c  | "khha".c | "ghha".c| "za".c
| "dddha".c | "rha".c | "fa".c | "yya".c
| "gga".c | "jja".c | "ddda".c | "bba".c
| eyelash_ra | zhe
;

dependent_vowel =
                   "-aa".c
| "-i".c         | "-ii".c
| "-u".c         | "-uu".c
| "-vocalic_r".c | "-vocalic_rr".c
| "-vocalic_l".c | "-vocalic_ll".c
| "-short_e".c   | "-e".c          | "-ai".c | "-candra_e".c
| "-short_o".c   | "-o".c          | "-au".c | "-candra_o".c
;

independent_vowel =
  "a".c          | "aa".c
| "short_a".c | "candra_a".c
| "i".c          | "ii".c
| "u".c          | "uu".c
| "vocalic_r".c  | "vocalic_rr".c
| "short_e".c    | "e".c           | "ai".c  | "candra_e".c
| "short_o".c    | "o".c           | "au".c  | "candra_o".c
;

typos =
  ("a -short_e".c : "short_a".c)
| ("ra virama i".c : "ii".c)
| ("u -u".c : "uu".c)
| ("u -uu".c : "uu".c)
| ("e -candra_e".c : "candra_e".c)
| ("e -short_e".c : "short_e".c)
| ("e -e".c : "ai".c)
| ("e -ai".c : "ai".c)
| ("ai -e".c : "ai".c)
| ("ai -ai".c : "ai".c)
| ("a -candra_o".c : "candra_o".c)
| ("aa -candra_e".c : "candra_o".c)
| ("candra_a -aa".c : "candra_o".c)
| ("candra_o -candra_e".c : "candra_o".c)
| ("a -short_o".c : "short_o".c)
| ("aa -short_e".c : "short_o".c)
| ("short_a -aa".c : "short_o".c)
| ("a -e".c : "o".c)
| ("a -o".c : "o".c)
| ("aa -e".c : "o".c)
| ("o -e".c : "o".c)
| ("a -ai".c : "au".c)
| ("a -au".c : "au".c)
| ("aa -ai".c : "au".c)
| ("au -e".c : "au".c)
| ("au -ai".c : "au".c)
| ("vocalic_r -vocalic_r".c : "vocalic_rr".c)
| ("vocalic_r -vocalic_rr".c : "vocalic_rr".c)
| ("a -candra_e".c : "candra_a".c)
| ("-aa -candra_e".c : "-candra_o".c)
| ("-candra_e -aa".c : "-candra_o".c)
| ("-candra_o -candra_e".c : "-candra_o".c)
| ("-aa -short_e".c : "-short_o".c)
| ("-short_e -aa".c : "-short_o".c)
| ("-aa -e".c : "-o".c)
| ("-e -aa".c : "-o".c)
| ("-aa -ai".c : "-au".c)
| ("-ai -aa".c : "-au".c)
;

fix_typos =
  CDRewrite["a -aa".c : "aa".c, "", "", star]
@ CDRewrite[typos, "", "", star]
;

compose_dotted_aux =
  ("ka nukta".c : "qa".c)
| ("kha nukta".c : "khha".c)
| ("ga nukta".c : "ghha".c)
| ("ja nukta".c : "za".c)
| ("jha nukta".c : zhe)  # non-standard, corresponds to Urdu Ú˜
| ("dda nukta".c : "dddha".c)
| ("ddha nukta".c : "rha".c)
| ("na nukta".c : "nnna".c)
| ("pha nukta".c : "fa".c)
| ("ya nukta".c : "yya".c)
| ("ra nukta".c : "rra".c)
| ("lla nukta".c : "llla".c)
| ("ssa nukta".c : "llla".c)  # non-standard, transliteration of Mlym:llla
;

compose_dotted = CDRewrite[compose_dotted_aux, "", "", star];

ins_inherent_vowel = CDRewrite["" : "@".g, consonant, "", star];

explicit_vowel_or_virama = dependent_vowel | "virama".c;

del_inherent_vowel = CDRewrite["@".g : "", "", explicit_vowel_or_virama, star];

# Modifiers that follow all and only consonants.
consonant_modifier = "@".g | dependent_vowel | "virama".c;

# Check that every consonant letter is followed by either a dependent vowel
# sign (including the inherent vowel "@"), or virama. Where that is not the
# case, insert ERROR as a marker for debugging.
check_consonants = CDRewrite[
  "" : "ERROR".g,
  consonant,
  (codepoint | grapheme) - consonant_modifier,
  star
];

# Check that no independent vowel letter is followed by a dependent vowel
# sign (including the inherent vowel "@"), or virama. Where that is not the
# case, insert ERROR as a marker for debugging.
check_independent_vowels = CDRewrite[
  "" : "ERROR".g,
  independent_vowel,
  consonant_modifier,
  star
];

ins_eyelash_ra = CDRewrite["rra".c : eyelash_ra, "", "virama".c, star];

# Replace codepoints with graphemes, replace inherent vowel "@" with "a",
# and delete virama etc.
to_graphemes_aux =
  codepoint_to_grapheme
| ("@".g : "a".g)
| ("virama".c : "")
| ("nukta".c : "")
;

to_graphemes = CDRewrite[to_graphemes_aux, "", "", star];

export CODEPOINTS_TO_GRAPHEMES = Optimize[
  codepoint*
@ fix_typos
@ compose_dotted
@ ins_inherent_vowel
@ del_inherent_vowel
@ check_consonants
@ check_independent_vowels
@ ins_eyelash_ra
@ to_graphemes
@ grapheme*
];
