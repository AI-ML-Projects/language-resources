# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Javanese verbalizer for decimals
################################################################################
import 'cardinal.grm' as c ;
import 'digit.grm' as d ;
import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

# adds markup for decimal semiotic class
func AddDecimalMarkup[decimal] {
  return (
    universal_rules.semclass_decimal
    decimal
  );
}

# verbalize sign
sign = (universal_rules.negative_true : (c.MINUS_NAME ("" : " "))) | universal_rules.negative_false;

# verbalizes the exponent
exponent =
  universal_rules.exponent ("" : " ping sepuluh pangkat ")
  c.CARDINAL
  universal_rules.rec_sep
;

# verbalizes integer part
integer = universal_rules.integer_part c.CARDINAL universal_rules.rec_sep;

# verbalizes the decimal part digit by digit (formal usage)
decimal =
  universal_rules.fractional_part ("" : " koma ")
  d.DIGIT_SEQUENCE
  universal_rules.rec_sep
;

# verbalizes the decimal part as a cardinal (informal usage, common in measures)
decimal_informal =
  universal_rules.fractional_part ("" : " koma ")
  c.CARDINAL
  ("#" : "")
  universal_rules.rec_sep
;

export DECIMAL = Optimize[
  sign?
  integer
  decimal?
  exponent?
];

export DECIMAL_MARKUP = AddDecimalMarkup[DECIMAL];

# Fractional part verbalized as cardinal and not individual digits. Does not
# apply when exponent present.
export DECIMAL_MARKUP_INFORMAL = AddDecimalMarkup[
  sign?
  integer
  decimal_informal?
];
