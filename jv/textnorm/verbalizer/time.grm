# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Javanese time verbalizer.
# example input: "time: {hours: 16 minutes: 45  style: 1}"
# example output: "jam lima kurang seprapat sore"
# Javanese use the 24h writing style and verbalize in 12h style and suffix a
# word to identify which times section it is.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c;

minutes =
    ("0"{1,2} : "")
  | (universal_rules.ins_space ((universal_rules.util_minutes - "0") @ c.CARDINAL))
;

min_0_9 = ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9");
min_1_30 = (min_0_9 - "0") | (("1" | "2") min_0_9) | "30";
min_1_30_no_quarter = min_1_30 - "15";
min_31_59 = (("3" | "4" | "5") min_0_9) - "30";
min_31_59_no_quarter = min_31_59 - "45";

# Number verbalization is different from other numbers, when it is used
# preceding to an unit (menit or sekon). Only for 6(enem) is the same.
# Below numbers are 2, 3, 4, 5, 7, 8, 9.
transformation =
   ("loro" : "rong")
  | ("telu" : "telung")
  | ("papat" : "patang")
  | ("lima" : "limang")
  | ("pitu" : "pitung")
  | ("wolu" : "wolung")
  | ("sanga" : "sangang")
;

rewrite_unit_exception =
  CDRewrite[transformation, "", (" menit" | " sekon"), universal_rules.sigma_star];

# Verbalizes the hours and minutes along with appropriate period_of_day.
# The "hours" argument indicates whether we need to increment the hour for
# "kurang" minutes, "minutes" handles minute verbalization (luwih/kurang).
func AddHoursMinutesPeriod[hours, minutes, seconds] {
  esuk = "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10";
  awan = "11" | "12" | ("13" : "1") | ("14" : "2");
  sore =  ("15" : "3") | ("16" : "4") | ("17" : "5");
  bengi = ("18" : "6") | ("19" : "7") | ("20" : "8") | ("21" : "9")
      | ("22" : "10") | ("23" : "11") | (("24" | "0") : "12") | "1" | "2";
  return (
    (
      ((hours @ esuk @ c.CARDINAL) minutes seconds? ("" : " esuk"))
    | ((hours @ awan @ c.CARDINAL) minutes seconds? ("" : " awan"))
    | ((hours @ sore @ c.CARDINAL) minutes seconds? ("" : " sore"))
    | ((hours @ bengi @ c.CARDINAL) minutes seconds? ("" : " bengi"))
    )
  );
}

# "luwih" minutes are 0-30, like English "past" in "10 minutes past two"
luwih_minutes_no_quarter =
  ("" : " luwih") universal_rules.minutes (min_1_30_no_quarter @ minutes) universal_rules.rec_sep
;
luwih_minutes_1_30 =
  ("" : " luwih") universal_rules.minutes (min_1_30 @ minutes) universal_rules.rec_sep
;
luwih_quarter =
  ("" : " luwih") universal_rules.minutes
  (("30" : " setengah") | ("15" : " seprapat")) universal_rules.rec_sep
;
luwih_minutes_0 = universal_rules.minutes ("0" : "") universal_rules.rec_sep
;

# "Kurang" minutes are 31-59, like English "to" in "10 minutes to two"
kurang_minutes_no_quarter =
  ("" : " kurang") universal_rules.minutes (min_31_59_no_quarter @ universal_rules.subtract_from_60
                                                        @ minutes) universal_rules.rec_sep
;
kurang_minutes =
  ("" : " kurang") universal_rules.minutes (min_31_59 @ universal_rules.subtract_from_60
                                             @ minutes) universal_rules.rec_sep
;
kurang_quarter =
  ("" : " kurang") universal_rules.minutes ("45" : " seprapat") universal_rules.rec_sep
;

hours = universal_rules.hours universal_rules.util_hours universal_rules.rec_sep;
hours_shift = universal_rules.hours universal_rules.hours_shift universal_rules.rec_sep;

seconds = Optimize[
  ("" : " menit")
  universal_rules.seconds (universal_rules.ins_space ((universal_rules.util_minutes - "0") @ c.CARDINAL)) ("" : " sekon")
  universal_rules.rec_sep
];

style1 = Optimize[
  ("" : "jam ")
  (
    AddHoursMinutesPeriod[hours, (luwih_minutes_0 | luwih_minutes_1_30),
                          seconds]
  | AddHoursMinutesPeriod[hours_shift, kurang_minutes, seconds]
  )
  (universal_rules.speak_period_true | universal_rules.speak_period_false)?
  universal_rules.style1?
];

# Style 2: same as style1 with special reading for quarters.
# E.g.
#     "02.45" --> "jam telu kurang seprapat esuk"
#                    (at three minus quarter in the morning)
#     "10.22" --> "jam sepulu luwih rolikur bengi"
#                    (at ten plus twenty two in the night)
style2 = Optimize[
  ("" : "jam ")
  (
    AddHoursMinutesPeriod[hours,
                          (
                            luwih_minutes_0
                          | luwih_quarter
                          | luwih_minutes_no_quarter
                          ),
                        seconds]
  | AddHoursMinutesPeriod[hours_shift,
                          (kurang_quarter | kurang_minutes_no_quarter),
                        seconds]
  )
  (universal_rules.speak_period_true | universal_rules.speak_period_false)?
  universal_rules.style1
];

javanese_time = Optimize[
  universal_rules.semclass_time
  (style1 | style2)
];

export TIME_MARKUP = javanese_time @ rewrite_unit_exception;
