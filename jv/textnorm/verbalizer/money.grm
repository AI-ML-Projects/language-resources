# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Javanese verbalizer for money

import 'money_classifier.grm' as money;
import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c;
import 'decimal.grm' as d;
################################################################################
# Here we use teo different of verbalizations for money depending on the
# particular input:
# 1) messages with no quantity and no zero numbers:
#    money { amount{ integer_part: non-zero fractional_part: non-zero} currency}
#    in this case the verbalization would be:
#    integer-part currency fractional-part currency-fraction
# 2) In all the other cases we verbalize the number as a decimal followed by
#    name of the currency

# Names of currencies
################################################################################
currencies =  StringFile[
 'money_currencies.txt'];
fractions = StringFile[
 'money_fractions.txt'];

# utility variables and functions used to make the code more compact
################################################################################
non_zero = universal_rules.non_zero_number;
sign = universal_rules.negative_false | (universal_rules.negative_true : c.MINUS_NAME);
# deletes ending zeros
del_ending_zeros = universal_rules.kDigit* universal_rules.d1to9 ("0" : "")*;
clean_norm = CDRewrite["000" : "#" ,"", " ", universal_rules.sigma_star];
# used to make all the minor have 3 digits, it is because the maximum number of
# digits for the subunits of the currencies classified is 3
set3digits =
  universal_rules.kDigit{3} | universal_rules.kDigit{2} ("" : "0") | universal_rules.kDigit ("" : "00");

fix_quantity = CDRewrite["satu " : "", "", "", universal_rules.sigma_star];

# patterns that define particular inputs so that we can apply the appropriate
# verbalization without using undeterministic weights. (During optimization
# should also help to prune the FST)
dec_money_pattern = Optimize[
 universal_rules.semclass_money
 (universal_rules.negative_false | universal_rules.negative_true)?
 (
   (universal_rules.integer_part universal_rules.kDigit+ universal_rules.rec_sep
    universal_rules.fractional_part universal_rules.kDigit+ universal_rules.rec_sep
    universal_rules.quantity universal_rules.kDigit+ universal_rules.rec_sep)
  |
   (universal_rules.integer_part "0"+ universal_rules.rec_sep
    universal_rules.fractional_part universal_rules.kDigit+ universal_rules.rec_sep
   )
 )
 universal_rules.currency money.CURRENCIES_CODES_AND_SYMBOLS universal_rules.rec_sep
];

# Currencies vocabularies
################################################################################
normalize_currency_symbols = CDRewrite[(
  (("a$" | "au$" | "bds$" | "b$" | "bz$" | "ca$" | "fj$" | "gy$" | "hk$" | "j$"
  | "ja$" | "nz$" | "si$" | "s$" | "nt$" | "us$" | "g$" | "ec$" ) : "$")
  | (("naƒ" | "aƒ") : "ƒ")
  | (("£e" | "e£" | "£l") : "₤")
  | ("s£" : "£")
  | (("cuc$" | "rd$") : "₱")
  ), "", "" , universal_rules.sigma_star];

normalized_codes_and_symbols =
  money.CURRENCIES_CODES_AND_SYMBOLS @ normalize_currency_symbols;

currencies_vocabulary = normalized_codes_and_symbols @ currencies;

fractions_vocabulary = normalized_codes_and_symbols @ fractions;

# Verbalization process
################################################################################

del_external_markup = universal_rules.semclass_money universal_rules.sigma_star;

# extract the value of the minor part
minorPreProc = Optimize[
  universal_rules.fractional_part non_zero universal_rules.rec_sep
];

# stores the currency with markup
passCurrency = universal_rules.currency money.CURRENCIES_CODES_AND_SYMBOLS universal_rules.rec_sep;

# Minor normalization:
# The normalization process is used to ensure that the minors are pronounced
# correctly. The reason is that name of minors indicates a precise decimal
# fraction that is not the same among all the currencies; the normalization
# tries to guarantee that the minor names and the number of fractional digits
# of the amount are consistent.
################################################################################
# 1) delete all the ending zeros and check the number of digits of the minor
#    as preconditions for the normalization
reducedMinor = (minorPreProc @ del_ending_zeros) @ universal_rules.kDigit{1,3};
# 2) fills the minor with zeros in order to get a number of 3 digits
threedigitMinor = reducedMinor @ set3digits;
# 3) the minor is merged with currencies and are added as many zeros
#    as is the number of digits for the subunits of  the particular currency
filledMinor = (threedigitMinor passCurrency) @ (universal_rules.kDigit{1,3}
              fractions_vocabulary);
# 4) three ending zeros are deleted and an hash symbol is placed as a
#    flag for successful normalization
minorProcessed = filledMinor @ clean_norm;
###############################################################################

# matches a normalized minor
minorNorm = Optimize[
  (minorProcessed @ ((universal_rules.kDigit{1,3} @ c.CARDINAL) ("#" : "")
   universal_rules.sigma_star))
];

# Fall back rule for any case where the normalization process can not be
# applied or fails for some reason
minorNotNorm = Optimize[
  (
      ((minorPreProc @ (universal_rules.kDigit+)) universal_rules.one_space
       (passCurrency : ""))
    |
     (minorProcessed @ del_ending_zeros (universal_rules.kNotQuote - universal_rules.kDigit))
    @ universal_rules.kDigit+ (((universal_rules.kBytes - universal_rules.kDigit) - "#")+ : "")
  ) @ (c.CARDINAL universal_rules.del_space_star)
];
transformation =
   ("loro" : "rong")
  | ("telu" : "telung")
  | ("papat" : "patang")
  | ("lima" : "limang")
  | ("pitu" : "pitung")
  | ("wolu" : "wolung")
  | ("sanga" : "sangang")
;
supported_currencies =
  " dolar" | " rupiah" | " euro" | " yen jepang" | " pound" | "[EOS]";
number_transformation = CDRewrite[
  transformation, "[BOS]", supported_currencies, universal_rules.sigma_star
];
verbalize_major = sign? (universal_rules.integer_part c.CARDINAL universal_rules.rec_sep)
  (universal_rules.fractional_part ("0"+ : "") universal_rules.rec_sep)?
  universal_rules.currency universal_rules.ins_space currencies_vocabulary universal_rules.rec_sep;

major = Optimize[ del_external_markup @ verbalize_major ];

minor = Optimize[ (minorNorm<-1>) | minorNotNorm];

fix_penny =
CDRewrite["pence" : "penny" , "[BOS]satu" " "+, "", universal_rules.sigma_star];

composed_money = major universal_rules.ins_space (minor @ fix_penny);

verbalize_quantity = Optimize[universal_rules.quantity (c.CARDINAL @ fix_quantity) universal_rules.rec_sep];

verbalize_decimal_money = Optimize[
  d.DECIMAL (universal_rules.ins_space verbalize_quantity)?
  universal_rules.ins_space (passCurrency @ currencies_vocabulary)
];

decimal_money = Optimize[
  Project[dec_money_pattern, 'input'] @
  (del_external_markup @ verbalize_decimal_money)
];

export MONEY_MARKUP = Optimize[
  composed_money | (decimal_money<5>) | (major @ number_transformation <-5> )
];
