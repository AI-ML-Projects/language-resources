# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Javanese verbalizer for date
# example input: date { day: 4 month: 5 year: 1990 }
# example output: empat mai sembilan belas sembilan puluh
################################################################################

import 'date_classifier.grm' as date;
import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c;

# Indonesian way of reading date is roughly characterized by the following
# rules:
# Days of the month are always spoken as cardinal numbers
# Month are spoken by name rather than number (a less frequent way to speak
# is to read them as ordinal numbers)
# Year is spoken as a cardinal, four digit years are spoken as two cardinal, by
# splitting the number into two parts (two digit each). The four digit years
# having a pattern like n0nn are not split (n = non zero number).

verbalize_weekday = date.DAY_NAMES;
export VERBALIZE_DAY = ((("0" : "")? universal_rules.kDigit) | (universal_rules.d1to9 universal_rules.kDigit))
  @ c.CARDINAL;
verbalize_month_by_name = date.MONTH_SHORT_NAMES | date.MONTH_FULL_NAMES |
  Project[date.MONTH_FULL_NAMES, 'output'];

# sometimes the year is verbalized by splititng it into two parts:
# i.e. 1945 -> sembilan belas empat puluh lima [19 45]
unsplittable_pattern = universal_rules.d1to9 "0" universal_rules.kDigit{2};
export VERBALIZE_YEAR = Optimize[
   ((unsplittable_pattern @ c.CARDINAL)<-1>)
 | ((universal_rules.kDigit{2} @ c.CARDINAL) universal_rules.ins_space
    (((universal_rules.d1to9 universal_rules.kDigit) @ c.CARDINAL) |
     (("0" : "nul ") (universal_rules.kDigit @ c.CARDINAL))))
 | (universal_rules.kDigit{1,3} @ c.CARDINAL)
];
verbalize_era = date.ERA_NAME;

weekday = universal_rules.weekday verbalize_weekday universal_rules.rec_sep;
day = universal_rules.day VERBALIZE_DAY universal_rules.rec_sep;
month_name = universal_rules.month verbalize_month_by_name universal_rules.rec_sep;
year = universal_rules.year VERBALIZE_YEAR universal_rules.rec_sep;
era = universal_rules.era verbalize_era universal_rules.rec_sep;

hybrid_date = Optimize[
  weekday? (day universal_rules.ins_space)? (month_name universal_rules.ins_space)? year?
  (universal_rules.ins_space era)? universal_rules.any_style?
];

export DATE_MARKUP = Optimize[
  universal_rules.semclass_date
  hybrid_date
];
