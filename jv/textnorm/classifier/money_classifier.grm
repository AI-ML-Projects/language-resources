# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Javanese classifier for money
################################################################################
import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
################################################################################

quantities =
   (("jt" | "yuta") : "1000000")
 | (("M" | "miliar") : "1000000000")
 | (("T" | "t" | "triliun") : "1000000000000")
;

export RUPIAH_SYMBOL = "rp.";
export CURRENCY_SYMBOLS = universal_rules.CURRENCY_SYMBOLS | RUPIAH_SYMBOL;
fix_pln  = CDRewrite["zł" : "zl", "", "", universal_rules.sigma_star];

# t$ conflicts with the above quatities.
export SYMBOLS = Optimize[
    universal_rules.lower_case_anything
  @ universal_rules.NORMALIZE_DOLLAR
  @ ((Project[CURRENCY_SYMBOLS, 'input'] - "t$") | "₰" | "₥")
  @ fix_pln
];

number = universal_rules.INTEGER_DECIMAL_DOT | universal_rules.DECIMAL_DOT;

export AMOUNT_MARKUP = Optimize[
   universal_rules.clear_space_star
   universal_func.InvertMarkup[universal_rules.money_amount] universal_rules.ins_space
   universal_func.InvertMarkup[universal_rules.opening_brace] universal_rules.ins_space
   number
   universal_func.InvertMarkup[universal_rules.closing_brace] universal_rules.ins_space
];

export SYMBOL_MARKUP = Optimize[
   universal_func.InvertMarkup[universal_rules.money_currency]
   universal_rules.ins_space
   universal_rules.ins_quote
   (universal_rules.lower_case_anything @ SYMBOLS)
   universal_rules.ins_quote
   universal_rules.one_space
];

dangerous_iso_codes = "ALL" | "AMD" | "BAM" | "BOB" | "BSD" | "BTN" | "BYR"
    | "COP" | "CUP" | "DKK" | "EGP" | "GEL" | "JOD" | "KES" | "KMF" | "MKD"
    | "MMK" | "MOP" | "NAD" | "PAB" | "PEN" | "PGK" | "PHP" | "PLN" | "RON"
    | "SAR" | "SEK" | "SOS" | "TOP" | "TRY" | "TTD";
iso_codes_safe = (universal_rules.ISO4217_CODES_ALL - dangerous_iso_codes) |
                 universal_rules.ISO4217_CODE_DM;
iso_codes = (iso_codes_safe @ universal_rules.lower_case);
export ISO4217_CODE_MARKUP = Optimize[
  universal_func.InvertMarkup[universal_rules.money_currency]
  universal_rules.one_space
  universal_rules.ins_quote
  iso_codes
  universal_rules.ins_quote
  universal_rules.ins_space
];

export CURRENCIES_CODES_AND_SYMBOLS = SYMBOLS | Project[iso_codes,'output'];

export CURRENCY = Optimize[ ISO4217_CODE_MARKUP | SYMBOL_MARKUP ];

export CURRENCY_MKP =
  universal_func.InvertMarkup[universal_rules.money_currency]
  universal_rules.one_space
  universal_rules.ins_quote
  CURRENCIES_CODES_AND_SYMBOLS
  universal_rules.ins_quote
;

# $5, 5$
export MONEY  = Optimize[
         ((CURRENCY AMOUNT_MARKUP universal_func.APPLY_QUANTITY_MARKUP[quantities
         @ universal_rules.CLEAN_SPACES ]?) |
         (AMOUNT_MARKUP universal_func.APPLY_QUANTITY_MARKUP[quantities
         @ universal_rules.CLEAN_SPACES ]?
         universal_rules.clear_space_star CURRENCY))
];

export MONEY_MARKUP = Optimize[
  universal_func.APPLY_MONEY_MARKUP[MONEY]
];
