# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Parser for date in Javanese form
################################################################################

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;

# Trasducers for the names of the week days
export DAY_FULL_NAMES =
    "senen"
  | "selasa"
  | "rebu"
  | "kemis"
  | "jumuwah"
  | "setu"
  | "minggu"
;
day_short_names =
   ("sen" : "senen")
 | ("sel" : "selasa")
 | ("reb" : "rebu")
 | ("kem" : "kemis")
 | ("jum" : "jumuwah")
 | ("set" : "setu")
 | (("min" | "mgg") : "minggu")
;

export DAY_NAMES = Optimize[
  universal_rules.lower_case @ (DAY_FULL_NAMES | day_short_names)
];

# Transducers for the names of the months
export MONTH_FULL_NAMES =
   ("1" : "januari")
 | ("2" : "februari")
 | ("3" : "maret")
 | ("4" : "april")
 | ("5" : "mei")
 | ("6" : "juni")
 | ("7" : "juli")
 | ("8" : "agustus")
 | ("9" : "september")
 | ("10" : "oktober")
 | ("11" : "november")
 | ("12" : "desember")
;
export MONTH_SHORT_NAMES =
   ("jan" : "januari")
 | ("feb" : "februari")
 | ("mar" : "maret")
 | ("apr" : "april")
 | ("mei" : "mei")
 | ("jun" : "juni")
 | ("jul" : "juli")
 | ("agu" : "agustus")
 | ("sep" : "september")
 | ("okt" : "oktober")
 | ("nov" : "november")
 | ("des" : "desember")
;

export MONTH_NAMES = Optimize[
  universal_rules.lower_case @ (MONTH_FULL_NAMES | MONTH_SHORT_NAMES)
];

# Transducers for Era
export ERA_NAME = Optimize[("SM" : "sadurunge masehi") | ("M" : "masehi")];

# Separator for numeric date
export SEPARATORS = ("-" | "/") : "";

# Dates such as "12 September" always get verbalized with initial "tanggal"
# ("date"). However, sometimes dates are prefixed with an explicit "tanggal",
# e.g. "pada tanggal 12 September". In such cases we want to avoid verbalizing
# "tanggal" twice, e.g. "pada tanggal tanggal dua belas september".
# We treat "tanggal" before a date as an optional prefix which gets deleted.
remove_tanggal = ((("t" | "T") "anggal") : "")
                 universal_rules.del_space_star;

# Here we classify dd/mm/yy, dd/mm/yyyy
numeric_date = Optimize[
  remove_tanggal?
  universal_rules.markup_day
  (universal_rules.kDigit{1,2} @ (universal_rules.any_day))
  SEPARATORS
  universal_rules.markup_month
  (universal_rules.kDigit{1,2} @ (universal_rules.any_month))
  SEPARATORS
  universal_rules.markup_year
  (universal_rules.kDigit{2} | universal_rules.kDigit{4})
];

# classifying date partially verbalized
# the only mandatory field in this case are month and year, because are the only
# that may require an actual verbalization, all the other are already words or
# cardinals
hybrid_date = Optimize[
  (universal_rules.markup_weekday (universal_rules.lower_case @
  (DAY_FULL_NAMES | Project[day_short_names, 'input']))
  universal_rules.del_space_star)?
  remove_tanggal?
  (universal_rules.markup_day universal_rules.any_day
  universal_rules.del_space_star)?
  (universal_rules.markup_month (universal_rules.lower_case @
  (Project[MONTH_FULL_NAMES, 'output']
  | Project[MONTH_SHORT_NAMES, 'input']))
  ("," : "")? universal_rules.del_space_star)
  (universal_rules.markup_year universal_rules.kDigit{2,4}
  universal_rules.del_space_star)?
  (universal_rules.markup_era Project[ERA_NAME, 'input'])?
];

date_markup = Optimize[
  universal_func.InvertMarkup[universal_rules.date] universal_rules.ins_space universal_func.InvertMarkup[universal_rules.opening_brace]
  (numeric_date | hybrid_date)
  universal_rules.ins_space universal_func.InvertMarkup[universal_rules.closing_brace]
];

export DATE_MARKUP = Optimize[ date_markup ];
